import asyncio
import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import asyncpg
from datetime import datetime

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = [1453081434]  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π ID

PAYMENT_DETAILS = (
    "üí≥ –î–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –≤–∫–ª–∞–¥–∞ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞:\n\n"
    "–ü—Ä–∏–Ω–∏–º–∞—é –¢–û–õ–¨–ö–û –¢-–ë–ê–ù–ö!!!\n"
    "–ö–∞—Ä—Ç–∞: 2200 7010 4325 8000\n"
    "–¢–µ–ª–µ—Ñ–æ–Ω: +79219753645\n"
    "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –í–∫–ª–∞–¥ –≤ –ø–æ—Å—Ç–∞–≤–∫—É"
)

# === –ü–ê–ü–ö–ò ===
os.makedirs("photos", exist_ok=True)

# === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
async def init_db():
    conn = await asyncpg.connect(
        host=os.getenv("PGHOST"),
        port=os.getenv("PGPORT"),
        user=os.getenv("PGUSER"),
        password=os.getenv("PGPASSWORD"),
        database=os.getenv("PGDATABASE")
    )

    await conn.execute("""
        CREATE TABLE IF NOT EXISTS supplies (
            id SERIAL PRIMARY KEY,
            name TEXT NOT NULL,
            status TEXT DEFAULT 'active'
        )
    """)

    await conn.execute("""
        CREATE TABLE IF NOT EXISTS items (
            id SERIAL PRIMARY KEY,
            supply_id INTEGER,
            title TEXT,
            price REAL,
            sell_price REAL,
            description TEXT,
            photo TEXT,
            is_sold INTEGER DEFAULT 0,
            status TEXT DEFAULT '–ö—É–ø–ª–µ–Ω'
        )
    """)

    await conn.execute("""
        CREATE TABLE IF NOT EXISTS contributions (
            user_id INTEGER,
            supply_id INTEGER,
            amount REAL,
            username TEXT,
            PRIMARY KEY (user_id, supply_id)
        )
    """)

    await conn.execute("""
        CREATE TABLE IF NOT EXISTS contribution_requests (
            id SERIAL PRIMARY KEY,
            user_id INTEGER,
            username TEXT,
            bank TEXT,
            payment_info TEXT,
            status TEXT DEFAULT 'pending'
        )
    """)

    row = await conn.fetchrow("SELECT 1 FROM supplies LIMIT 1")
    if not row:
        await conn.execute(
            "INSERT INTO supplies (name, status) VALUES ($1, 'active')",
            f"–ü–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç {datetime.now().strftime('%d.%m.%Y')}"
        )

    await conn.close()

# === FSM ===
class AddItem(StatesGroup):
    waiting_title = State()
    waiting_price = State()
    waiting_sell_price = State()
    waiting_description = State()
    waiting_photo = State()

class AddContribution(StatesGroup):
    waiting_username = State()
    waiting_amount = State()

class MakeContribution(StatesGroup):
    waiting_bank = State()
    waiting_payment_info = State()
    waiting_confirm = State()

class EditItem(StatesGroup):
    waiting_new_title = State()
    waiting_new_price = State()
    waiting_new_sell_price = State()
    waiting_new_description = State()
    waiting_new_photo = State()

# === –ë–û–¢ ===
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# === –ö–õ–ê–í–ò–ê–¢–£–†–´ ===
def get_main_menu(user_id):
    buttons = [
        [InlineKeyboardButton(text="1. –ú–æ–π –≤–∫–ª–∞–¥", callback_data="my_contributions")],
        [InlineKeyboardButton(text="2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É", callback_data="view_supply")],
        [InlineKeyboardButton(text="3. –°–¥–µ–ª–∞—Ç—å –≤–∫–ª–∞–¥", callback_data="make_contribution")]
    ]
    if user_id in ADMIN_IDS:
        buttons.append([InlineKeyboardButton(text="4. –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_supply_list_keyboard(supply_type):
    # –°–æ–∑–¥–∞—ë—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    pass

def get_item_list_keyboard(supply_id, for_admin=False):
    # –°–æ–∑–¥–∞—ë—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    pass

def get_admin_panel():
    buttons = [
        [InlineKeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∫–ª–∞–¥—ã –ª—é–¥–µ–π", callback_data="admin_view_contributions")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∫–ª–∞–¥", callback_data="admin_add_contribution")],
        [InlineKeyboardButton(text="üì¶ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É", callback_data="admin_add_item")],
        [InlineKeyboardButton(text="üîç –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫–æ–π", callback_data="admin_view_supply")],
        [InlineKeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É", callback_data="admin_create_supply")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É", callback_data="admin_delete_supply")],
        [InlineKeyboardButton(text="üì¨ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤–∫–ª–∞–¥—ã", callback_data="admin_view_requests")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# === –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username

    await state.clear()

    conn = await asyncpg.connect(
        host=os.getenv("PGHOST"),
        port=os.getenv("PGPORT"),
        user=os.getenv("PGUSER"),
        password=os.getenv("PGPASSWORD"),
        database=os.getenv("PGDATABASE")
    )

    row = await conn.fetchrow("SELECT 1 FROM contributions WHERE user_id = $1", user_id)
    if not row:
        await conn.execute("INSERT INTO contributions (user_id, username, amount) VALUES ($1, $2, 0)", user_id, username)
    else:
        await conn.execute("UPDATE contributions SET username = $1 WHERE user_id = $2", username, user_id)

    await conn.close()

    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu(user_id))

@dp.callback_query(F.data == "back_to_main")
async def back_to_main(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu(call.from_user.id))

@dp.callback_query(F.data == "my_contributions")
async def my_contributions(call: CallbackQuery):
    user_id = call.from_user.id

    conn = await asyncpg.connect(
        host=os.getenv("PGHOST"),
        port=os.getenv("PGPORT"),
        user=os.getenv("PGUSER"),
        password=os.getenv("PGPASSWORD"),
        database=os.getenv("PGDATABASE")
    )

    rows = await conn.fetch("""
        SELECT s.name, c.amount, s.status
        FROM contributions c
        JOIN supplies s ON c.supply_id = s.id
        WHERE c.user_id = $1
    """, user_id)

    await conn.close()

    if not rows:
        await call.answer("–í—ã –µ—â—ë –Ω–µ –¥–µ–ª–∞–ª–∏ –≤–∫–ª–∞–¥–æ–≤.", show_alert=True)
        return

    text = "üìä –í–∞—à–∏ –≤–∫–ª–∞–¥—ã:\n\n"
    for row in rows:
        name, amount, status = row
        profit = "‚Äî"
        percent = "‚Äî"
        if status == "completed":
            profit = round(amount * 1.3, 2)
            percent = "30%"
        text += f"üì¶ {name}\nüí∏ –í–∫–ª–∞–¥: {amount}‚ÇΩ\nüìà –ü—Ä–∏–±—ã–ª—å: {profit}‚ÇΩ\nüìä –î–æ–ª—è: {percent}\n\n"

    await call.message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]))

@dp.callback_query(F.data == "view_supply")
async def view_supply(call: CallbackQuery):
    buttons = [
        [InlineKeyboardButton(text="üì¶ –ù—ã–Ω–µ—à–Ω—è—è –ø–æ—Å—Ç–∞–≤–∫–∞", callback_data="supply_list_current")],
        [InlineKeyboardButton(text="üì¶ –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏", callback_data="supply_list_completed")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∫—É:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@dp.callback_query(F.data.startswith("supply_list_"))
async def show_supply_list(call: CallbackQuery):
    supply_type = call.data.split("_")[2]
    conn = await asyncpg.connect(
        host=os.getenv("PGHOST"),
        port=os.getenv("PGPORT"),
        user=os.getenv("PGUSER"),
        password=os.getenv("PGPASSWORD"),
        database=os.getenv("PGDATABASE")
    )

    if supply_type == "current":
        supplies = await conn.fetch("SELECT id, name FROM supplies WHERE status = 'active'")
    else:
        supplies = await conn.fetch("SELECT id, name FROM supplies WHERE status = 'completed'")

    await conn.close()

    buttons = []
    for s in supplies:
        buttons.append([InlineKeyboardButton(text=s["name"], callback_data=f"supply_user_{s['id']}")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="view_supply")])
    await call.message.answer(f"–°–ø–∏—Å–æ–∫ {supply_type} –ø–æ—Å—Ç–∞–≤–æ–∫:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@dp.callback_query(F.data.startswith("supply_user_"))
async def user_show_supply_items(call: CallbackQuery):
    supply_id = int(call.data.split("_")[2])

    conn = await asyncpg.connect(
        host=os.getenv("PGHOST"),
        port=os.getenv("PGPORT"),
        user=os.getenv("PGUSER"),
        password=os.getenv("PGPASSWORD"),
        database=os.getenv("PGDATABASE")
    )

    name_row = await conn.fetchrow("SELECT name FROM supplies WHERE id = $1", supply_id)
    if not name_row:
        await call.answer("–ü–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    items = await conn.fetch("SELECT id, title, price, is_sold FROM items WHERE supply_id = $1", supply_id)
    await conn.close()

    buttons = []
    for item in items:
        item_id, title, price, is_sold = item["id"], item["title"], item["price"], item["is_sold"]
        status = "‚úÖ" if is_sold else "üîÑ"
        buttons.append([InlineKeyboardButton(text=f"{title} ‚Äî {price}‚ÇΩ {status}", callback_data=f"user_item_{item_id}")])

    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="view_supply")])
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await call.message.answer(f"üì¶ –¢–æ–≤–∞—Ä—ã –≤ –ø–æ—Å—Ç–∞–≤–∫–µ: {name_row['name']}", reply_markup=markup)

@dp.callback_query(F.data.startswith("user_item_"))
async def user_show_item_details(call: CallbackQuery):
    item_id = int(call.data.split("_")[2])

    conn = await asyncpg.connect(
        host=os.getenv("PGHOST"),
        port=os.getenv("PGPORT"),
        user=os.getenv("PGUSER"),
        password=os.getenv("PGPASSWORD"),
        database=os.getenv("PGDATABASE")
    )

    row = await conn.fetchrow("""
        SELECT title, price, sell_price, description, photo, is_sold, supply_id, status
        FROM items WHERE id = $1
    """, item_id)
    await conn.close()

    if not row:
        await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    title, price, sell_price, desc, photo_path, is_sold_db, supply_id, status = row

    arrival_text = "üöö –ü—Ä–∏–µ–¥–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ: <b>20‚Äì30 –¥–Ω–µ–π</b>"
    if sell_price < 5000:
        sale_time = "‚è± –ü—Ä–æ–¥–∞–∂–∞: <b>–ú–µ–Ω—å—à–µ –Ω–µ–¥–µ–ª–∏</b>"
    elif 5000 <= sell_price < 10000:
        sale_time = "‚è± –ü—Ä–æ–¥–∞–∂–∞: <b>5‚Äì10 –¥–Ω–µ–π</b>"
    elif 10000 <= sell_price < 15000:
        sale_time = "‚è± –ü—Ä–æ–¥–∞–∂–∞: <b>10‚Äì20 –¥–Ω–µ–π</b>"
    else:
        sale_time = "‚è± –ü—Ä–æ–¥–∞–∂–∞: <b>3 –Ω–µ–¥–µ–ª–∏ ‚Äì 2 –º–µ—Å—è—Ü–∞</b>"

    money_time = "üí∞ –î–µ–Ω—å–≥–∏: <b>—á–µ—Ä–µ–∑ 1‚Äì2 –¥–Ω—è –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏</b>"

    text = (
        f"üì¶ <b>{title}</b>\n\n"
        f"üí∞ –ó–∞–∫—É–ø–∫–∞: <b>{price}‚ÇΩ</b>\n"
        f"üéØ –ü—Ä–æ–¥–∞–∂–∞: <b>{sell_price}‚ÇΩ</b>\n"
        f"üè∑ –°—Ç–∞—Ç—É—Å: <b>{status}</b>\n\n"
        f"{arrival_text}\n"
        f"{sale_time}\n"
        f"{money_time}\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{desc or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}"
    )

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"supply_user_{supply_id}")]
    ])

    if photo_path and os.path.exists(photo_path):
        try:
            await call.message.delete()
        except:
            pass
        await bot.send_photo(
            chat_id=call.message.chat.id,
            photo=FSInputFile(photo_path),
            caption=text,
            reply_markup=markup,
            parse_mode="HTML"
        )
    else:
        await call.message.answer(text, reply_markup=markup, parse_mode="HTML")

@dp.callback_query(F.data == "make_contribution")
async def make_contribution(call: CallbackQuery):
    text = (
        "üí≥ –î–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –≤–∫–ª–∞–¥–∞ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞:\n\n"
        "–ü—Ä–∏–Ω–∏–º–∞—é –¢–û–õ–¨–ö–û –¢-–ë–ê–ù–ö!!!\n"
        "–ö–∞—Ä—Ç–∞: 2200 7010 4325 8000\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: +79219753645\n"
        "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –í–∫–ª–∞–¥ –≤ –ø–æ—Å—Ç–∞–≤–∫—É\n\n"
        "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
    )
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –Ø —Å–¥–µ–ª–∞–ª –≤–∫–ª–∞–¥", callback_data="user_start_contribution")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    await call.message.edit_text(text, reply_markup=markup)

@dp.callback_query(F.data == "user_start_contribution")
async def start_contribution_flow(call: CallbackQuery, state: FSMContext):
    banks = ["–°–±–µ—Ä–±–∞–Ω–∫", "–¢-–ë–∞–Ω–∫", "–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫", "–û–∑–æ–Ω –±–∞–Ω–∫", "–í–¢–ë", "–°–æ–≤–∫–æ–º–±–∞–Ω–∫", "–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫"]
    buttons = [[InlineKeyboardButton(text=bank, callback_data=f"bank_{bank}")] for bank in banks]
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")])
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await call.message.edit_text("üè¶ –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:", reply_markup=markup)
    await state.set_state(MakeContribution.waiting_bank)

@dp.callback_query(F.data.startswith("bank_"))
async def contribution_choose_bank(call: CallbackQuery, state: FSMContext):
    bank = call.data.replace("bank_", "").replace("_", " ")
    await state.update_data(bank=bank)
    await state.set_state(MakeContribution.waiting_payment_info)
    await call.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{bank}</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:",
        parse_mode="HTML"
    )

@dp.message(MakeContribution.waiting_payment_info)
async def contribution_enter_info(message: Message, state: FSMContext):
    payment_info = message.text.strip()
    if not payment_info:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ!")
        return

    await state.update_data(payment_info=payment_info)
    data = await state.get_data()

    text = (
        "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n\n"
        f"üè¶ –ë–∞–Ω–∫: <b>{data['bank']}</b>\n"
        f"üì±/üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: <code>{payment_info}</code>\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ?"
    )
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_contribution")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="user_start_contribution")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]
    ])
    await message.answer(text, reply_markup=markup, parse_mode="HTML")
    await state.set_state(MakeContribution.waiting_confirm)

@dp.callback_query(F.data == "confirm_contribution")
async def confirm_and_send_to_admin(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user = call.from_user

    conn = await asyncpg.connect(
        host=os.getenv("PGHOST"),
        port=os.getenv("PGPORT"),
        user=os.getenv("PGUSER"),
        password=os.getenv("PGPASSWORD"),
        database=os.getenv("PGDATABASE")
    )

    req_id = await conn.fetchval("""
        INSERT INTO contribution_requests (user_id, username, bank, payment_info, status)
        VALUES ($1, $2, $3, $4, 'pending') RETURNING id
    """, user.id, user.username, data['bank'], data['payment_info'])

    await conn.close()

    for admin_id in ADMIN_IDS:
        try:
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∫–ª–∞–¥", callback_data=f"approve_req_{req_id}")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_req_{req_id}")]
            ])
            await bot.send_message(
                admin_id,
                f"üì¨ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–∫–ª–∞–¥</b>\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} (@{user.username or '–Ω–µ—Ç'})\n"
                f"üè¶ –ë–∞–Ω–∫: {data['bank']}\n"
                f"üì±/üí≥: <code>{data['payment_info']}</code>",
                reply_markup=markup,
                parse_mode="HTML"
            )
        except:
            pass

    await call.message.edit_text(
        "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
        "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∫–ª–∞–¥–∞.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
    )
    await state.clear()

@dp.callback_query(F.data == "admin_panel")
async def admin_panel(call: CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return
    await call.message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_panel())

@dp.callback_query(F.data == "admin_view_contributions")
async def admin_view_contributions(call: CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        return

    conn = await asyncpg.connect(
        host=os.getenv("PGHOST"),
        port=os.getenv("PGPORT"),
        user=os.getenv("PGUSER"),
        password=os.getenv("PGPASSWORD"),
        database=os.getenv("PGDATABASE")
    )

    rows = await conn.fetch("""
        SELECT tg.username, c.user_id, s.name, c.amount
        FROM contributions c
        JOIN supplies s ON c.supply_id = s.id
        LEFT JOIN (SELECT user_id, username FROM contributions GROUP BY user_id) tg
        ON c.user_id = tg.user_id
    """)
    await conn.close()

    if not rows:
        await call.answer("–ù–µ—Ç –≤–∫–ª–∞–¥–æ–≤.", show_alert=True)
        return

    text = "üìä –í—Å–µ –≤–∫–ª–∞–¥—ã:\n\n"
    for row in rows:
        username, user_id, supply_name, amount = row["username"], row["user_id"], row["name"], row["amount"]
        username = username or f"ID:{user_id}"
        text += f"üë§ {username} ‚Üí {supply_name}: {amount}‚ÇΩ\n"

    await call.message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]))

@dp.callback_query(F.data == "admin_add_contribution")
async def admin_add_contribution_start(call: CallbackQuery, state: FSMContext):
    if call.from_user.id not in ADMIN_IDS:
        return
    await state.set_state(AddContribution.waiting_username)
    await call.message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ <b>—é–∑–µ—Ä–Ω–µ–π–º</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, @ivan_123 –∏–ª–∏ ivan_123):", parse_mode="HTML")

@dp.message(AddContribution.waiting_username)
async def enter_username(message: Message, state: FSMContext):
    username = message.text.strip()
    if username.startswith('@'):
        username = username[1:]
    if not username:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(username=username)
    await state.set_state(AddContribution.waiting_amount)
    await message.answer(f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–∫–ª–∞–¥–∞ (–≤ —Ä—É–±–ª—è—Ö) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>@{username}</b>:", parse_mode="HTML")

@dp.message(AddContribution.waiting_amount)
async def enter_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0: raise ValueError
    except:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")
        return

    data = await state.get_data()
    username = data["username"]

    conn = await asyncpg.connect(
        host=os.getenv("PGHOST"),
        port=os.getenv("PGPORT"),
        user=os.getenv("PGUSER"),
        password=os.getenv("PGPASSWORD"),
        database=os.getenv("PGDATABASE")
    )

    row = await conn.fetchrow("SELECT user_id FROM contributions WHERE username = $1 LIMIT 1", username)
    if not row:
        row = await conn.fetchrow("SELECT user_id FROM contributions WHERE username = $1 LIMIT 1", username)
    if not row:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>@{username}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n–û–Ω –¥–æ–ª–∂–µ–Ω —Ö–æ—Ç—è –±—ã —Ä–∞–∑ –Ω–∞–∂–∞—Ç—å /start.", parse_mode="HTML")
        await state.clear()
        return

    user_id = row["user_id"]

    supply_row = await conn.fetchrow("SELECT id FROM supplies WHERE status = 'active' LIMIT 1")
    if not supply_row:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏. –°–æ–∑–¥–∞–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç–∞–≤–∫—É.")
        await state.clear()
        return
    supply_id = supply_row["id"]

    existing = await conn.fetchrow("SELECT amount FROM contributions WHERE user_id = $1 AND supply_id = $2", user_id, supply_id)
    if existing:
        new_amount = existing["amount"] + amount
        await conn.execute("UPDATE contributions SET amount = $1 WHERE user_id = $2 AND supply_id = $3", new_amount, user_id, supply_id)
        msg_text = f"‚úÖ –í–∫–ª–∞–¥ –æ–±–Ω–æ–≤–ª—ë–Ω! –¢–µ–ø–µ—Ä—å —É @{username} –≤–∫–ª–∞–¥: {new_amount}‚ÇΩ –≤ –ø–æ—Å—Ç–∞–≤–∫–µ #{supply_id}."
    else:
        await conn.execute("INSERT INTO contributions (user_id, supply_id, amount, username) VALUES ($1, $2, $3, $4)", user_id, supply_id, amount, username)
        msg_text = f"‚úÖ –í–∫–ª–∞–¥ –Ω–∞ {amount}‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –≤ –ø–æ—Å—Ç–∞–≤–∫—É #{supply_id}."

    await conn.close()

    await message.answer(msg_text)
    await state.clear()
    await cmd_start(message, state)

# === –ó–ê–ü–£–°–ö ===
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())