import asyncio
import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import asyncpg # Changed from sqlite3
from datetime import datetime
from dotenv import load_dotenv # For loading environment variables

load_dotenv() # Load environment variables from .env file

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")  # Get from environment or default
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "1453081434").split(',')))  # Get from environment or default
PAYMENT_DETAILS = (
    "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤–∫–ª–∞–¥–∞:\n"
    "–ü—Ä–∏–Ω–∏–º–∞—é –¢–û–õ–¨–ö–û –¢-–ë–ê–ù–ö!!!\n"
    "–ö–∞—Ä—Ç–∞: 2200 7010 4325 8000\n"
    "–¢–µ–ª–µ—Ñ–æ–Ω: +79219753645\n"
    "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –í–∫–ª–∞–¥ –≤ –ø–æ—Å—Ç–∞–≤–∫—É"
)

# === –ü–ê–ü–ö–ò ===
os.makedirs("photos", exist_ok=True)
DATABASE_URL = os.getenv("DATABASE_URL") # Railway provides this env var

# === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
async def init_db():
    conn = None
    try:
        conn = await asyncpg.connect(DATABASE_URL)

        # === –ü–æ—Å—Ç–∞–≤–∫–∏ ===
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS supplies (
                id BIGSERIAL PRIMARY KEY,
                name TEXT NOT NULL,
                status TEXT DEFAULT 'active'
            )
        """)

        # === –¢–æ–≤–∞—Ä—ã ===
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS items (
                id BIGSERIAL PRIMARY KEY,
                supply_id INTEGER,
                title TEXT,
                price REAL,
                sell_price REAL,
                description TEXT,
                photo TEXT,
                is_sold BOOLEAN DEFAULT FALSE, -- Changed from INTEGER to BOOLEAN
                status TEXT DEFAULT '–ö—É–ø–ª–µ–Ω', -- Added default for new column
                FOREIGN KEY(supply_id) REFERENCES supplies(id) ON DELETE CASCADE
            )
        """)

        # === –í–∫–ª–∞–¥—ã ===
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS contributions (
                user_id BIGINT,
                supply_id INTEGER,
                amount REAL,
                username TEXT,
                PRIMARY KEY (user_id, supply_id)
            )
        """)
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS contribution_requests (
                id BIGSERIAL PRIMARY KEY,
                user_id BIGINT,
                username TEXT,
                bank TEXT,
                payment_info TEXT,
                status TEXT DEFAULT 'pending'  -- pending, approved, rejected
            )
        """)

        # === –î–û–ë–ê–í–õ–Ø–ï–ú –°–¢–û–õ–ë–ï–¶ status, –ï–°–õ–ò –ï–ì–û –ù–ï–¢ ===
        # Check if 'status' column exists in 'items' table
        column_exists = await conn.fetchval("""
            SELECT EXISTS (
                SELECT 1
                FROM information_schema.columns
                WHERE table_name = 'items' AND column_name = 'status'
            );
        """)
        if not column_exists:
            await conn.execute("ALTER TABLE items ADD COLUMN status TEXT DEFAULT '–ö—É–ø–ª–µ–Ω'")

        # === –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ—Å—Ç–∞–≤–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç ===
        count = await conn.fetchval("SELECT COUNT(*) FROM supplies")
        if count == 0:
            await conn.execute("INSERT INTO supplies (name, status) VALUES ('–ü–æ—Å—Ç–∞–≤–∫–∞ #1', 'active')")

    except Exception as e:
        print(f"Error initializing database: {e}")
    finally:
        if conn:
            await conn.close()

# Call init_db in main async function
# asyncio.run(init_db()) - this will be called in main()

# === FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ===
class AddItem(StatesGroup):
    waiting_title = State()
    waiting_price = State()
    waiting_sell_price = State()
    waiting_description = State()
    waiting_photo = State()

# === FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–∞ ===
class AddContribution(StatesGroup):
    waiting_username = State()
    waiting_amount = State()

class EditItem(StatesGroup):
    waiting_new_title = State()
    waiting_new_price = State()
    waiting_new_sell_price = State()
    waiting_new_description = State()
    waiting_new_photo = State()

class MakeContribution(StatesGroup):
    waiting_bank = State()
    waiting_payment_info = State()
    waiting_confirm = State()

class EditContribution(StatesGroup):
    waiting_new_amount = State()

# === –ë–û–¢ ===
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# Helper function for database connection
async def get_db_conn():
    return await asyncpg.connect(DATABASE_URL)

# === –ö–õ–ê–í–ò–ê–¢–£–†–´ ===
def get_main_menu(user_id):
    buttons = [
        [InlineKeyboardButton(text="1Ô∏è‚É£ –ú–æ–π –≤–∫–ª–∞–¥", callback_data="my_contributions")],
        [InlineKeyboardButton(text="2Ô∏è‚É£ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É", callback_data="view_supply")],
        [InlineKeyboardButton(text="3Ô∏è‚É£ –°–¥–µ–ª–∞—Ç—å –≤–∫–ª–∞–¥", callback_data="make_contribution")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="my_stats")],
        [InlineKeyboardButton(text="‚ùì –í–æ–ø—Ä–æ—Å—ã", callback_data="faq")]
    ]
    if user_id in ADMIN_IDS:
        buttons.append([InlineKeyboardButton(text="üîß –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def get_supply_list_keyboard(supply_type):
    conn = await get_db_conn()
    supplies = []
    try:
        if supply_type == "current":
            supplies = await conn.fetch("SELECT id, name FROM supplies WHERE status = 'active'")
        else:
            supplies = await conn.fetch("SELECT id, name FROM supplies WHERE status = 'completed'")
    finally:
        await conn.close()

    buttons = []
    for s in supplies:
        buttons.append([InlineKeyboardButton(text=s['name'], callback_data=f"supply_{s['id']}_{supply_type}")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def get_item_list_keyboard(supply_id, for_admin=False):
    conn = await get_db_conn()
    items = []
    try:
        items = await conn.fetch("SELECT id, title, price, is_sold FROM items WHERE supply_id = $1", supply_id)
    finally:
        await conn.close()

    buttons = []
    for item in items:
        item_id, title, price, is_sold = item['id'], item['title'], item['price'], item['is_sold']
        status = "‚úÖ" if is_sold else "üîÑ"
        text = f"{title} ‚Äî {price}‚ÇΩ {status}"
        callback = f"admin_item_{item_id}" if for_admin else f"user_item_{item_id}"
        buttons.append([InlineKeyboardButton(text=text, callback_data=callback)])

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    back_callback = "admin_view_supply" if for_admin else "view_supply"
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback)])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_admin_panel():
    buttons = [
        [InlineKeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∫–ª–∞–¥—ã –ª—é–¥–µ–π", callback_data="admin_view_contributions")],
        [InlineKeyboardButton(text="üì¨ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤–∫–ª–∞–¥—ã", callback_data="admin_view_requests")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∫–ª–∞–¥", callback_data="admin_add_contribution")],
        [InlineKeyboardButton(text="üì¶ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É", callback_data="admin_add_item")],
        [InlineKeyboardButton(text="üîç –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫–æ–π", callback_data="admin_view_supply")],
        [InlineKeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É", callback_data="admin_create_supply")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É", callback_data="admin_delete_supply")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@dp.callback_query(F.data == "admin_view_requests")
async def admin_view_requests(call: CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        return

    conn = await get_db_conn()
    requests = []
    try:
        requests = await conn.fetch("SELECT id, user_id, username, bank, payment_info FROM contribution_requests WHERE status = 'pending'")
    finally:
        await conn.close()

    if not requests:
        await call.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫.", show_alert=True)
        return

    for req in requests:
        req_id, user_id, username, bank, info = req['id'], req['user_id'], req['username'], req['bank'], req['payment_info']
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_req_{req_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_req_{req_id}")]
        ])
        await call.message.answer(
            f"üì¨ –ó–∞—è–≤–∫–∞ #{req_id}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username or user_id}\n"
            f"üè¶ –ë–∞–Ω–∫: {bank}\n"
            f"üì±/üí≥: <code>{info}</code>",
            reply_markup=markup,
            parse_mode="HTML"
        )


@dp.callback_query(F.data == "faq")
async def show_faq(call: CallbackQuery):
    faq_text = (
        "‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>\n\n"

        "1Ô∏è‚É£ <b>–ö–∞–∫ –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏ –∑–∞ –≤–∫–ª–∞–¥?</b>\n"
        "–î–µ–Ω—å–≥–∏ –∑–∞ –≤–∫–ª–∞–¥ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ –æ–Ω–∏ –µ—â—ë –Ω–µ –ø–æ—Ç—Ä–∞—á–µ–Ω—ã –Ω–∞ –ø–æ–∫—É–ø–∫—É. –û–± —ç—Ç–æ–º –º–æ–∂–Ω–æ —Å–ø—Ä–æ—Å–∏—Ç—å —É –∞–¥–º–∏–Ω–∞ @arkhipster\n\n"

        "2Ô∏è‚É£ <b>–ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ–Ω—Ç –≤–∫–ª–∞–¥–∞?</b>\n"
        "–ü—Ä–æ—Ü–µ–Ω—Ç –≤–∫–ª–∞–¥–∞ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ:\n<code>(–°—É–º–º–∞ –≤–∞—à–µ–≥–æ –≤–∫–ª–∞–¥–∞ / —Å—É–º–º–∞ –≤—Å–µ—Ö –≤–∫–ª–∞–¥—á–∏–∫–æ–≤) * 0.8</code>\n"
        "20% —Å —Å—É–º–º—ã –≤–∞—à–µ–≥–æ –≤–∫–ª–∞–¥–∞ –∏–¥—ë—Ç –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –±–æ—Ç–∞, –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —É—Å–ª—É–≥ –¥–æ—Å—Ç–∞–≤–∫–∏, –ø—Ä–æ–¥–∞–∂–∏ –∏ –ø–æ–∏—Å–∫–∞ –≤–µ—â–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û –ø—Ä–æ–¥–∞–¥—É—Ç—Å—è —Å –Ω–∞—Ü–µ–Ω–∫–æ–π.\n\n"

        "3Ô∏è‚É£ <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –≤–∫–ª–∞–¥–∞ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è?</b>\n"
        "–ß–µ–º –±–æ–ª—å—à–µ –æ–±—â–µ–π —Å—É–º–º—ã –≤–∫–ª–∞–¥–∞, —Ç–µ–º –º–µ–Ω—å—à–µ –≤–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç. –ù–æ —ç—Ç–æ –Ω–µ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –º–µ–Ω—å—à–µ –¥–µ–Ω–µ–≥ ‚Äî —á–µ–º –±–æ–ª—å—à–µ —Å—É–º–º–∞ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–≤, —Ç–µ–º –±–æ–ª—å—à–µ –≤–µ—â–µ–π —è –º–æ–≥—É –∑–∞–∫–∞–∑–∞—Ç—å –∑–∞ –æ–¥–Ω—É –ø–æ—Å—Ç–∞–≤–∫—É.\n\n"

        "4Ô∏è‚É£ <b>–ö–∞–∫ —á–∞—Å—Ç–æ –±—ã–≤–∞—é—Ç –ø–æ—Å—Ç–∞–≤–∫–∏?</b>\n"
        "–ö–∞–∂–¥–∞—è –Ω–æ–≤–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –±—ã–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–∫—É–ø–ª–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –†–§ (–≤ –æ—Å–Ω–æ–≤–Ω–æ–º —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 1‚Äì2 –Ω–µ–¥–µ–ª–∏).\n\n"

        "5Ô∏è‚É£ <b>–°–∫–æ–ª—å–∫–æ —è –ø–æ–ª—É—á—É, –µ—Å–ª–∏ –≤–ª–æ–∂—É 10 000 —Ä—É–±–ª–µ–π?</b>\n"
        "–ü—Ä–∏–º–µ—Ä–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è –≤ 20‚Äì100% –æ—Ç –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏.\n\n"

        "6Ô∏è‚É£ <b>–ï—Å—Ç—å –ª–∏ –≥–∞—Ä–∞–Ω—Ç–∏–∏, —á—Ç–æ —è –ø–æ–ª—É—á—É –¥–µ–Ω—å–≥–∏, –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –ø—Ä–æ–¥–∞—ë—Ç—Å—è?</b>\n"
        "–ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –ø—Ä–æ–¥–∞—ë—Ç—Å—è, —è –≤–æ–∑–≤—Ä–∞—â–∞—é —Å—É–º–º—É –≤–∞—à–µ–≥–æ –≤–∫–ª–∞–¥–∞.\n\n"

        "7Ô∏è‚É£ <b>–ö–∞–∫ –ø–æ–Ω—è—Ç—å, —á—Ç–æ —Ç–æ–≤–∞—Ä –Ω–µ –ø—Ä–æ–¥–∞–ª—Å—è?</b>\n"
        "–ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –ª–µ–∂–∏—Ç –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ –±–æ–ª—å—à–µ –¥–≤—É—Ö –º–µ—Å—è—Ü–µ–≤ (–¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ—Ä–æ–∂–µ 15 000‚ÇΩ ‚Äî –º–∞–∫—Å–∏–º—É–º 3 –º–µ—Å—è—Ü–∞), —Å—á–∏—Ç–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω –Ω–µ –ø—Ä–æ–¥–∞–ª—Å—è."
    )

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

    await call.message.edit_text(faq_text, reply_markup=markup, parse_mode="HTML")

@dp.callback_query(F.data == "my_stats")
async def my_stats(call: CallbackQuery):
    user_id = call.from_user.id

    conn = await get_db_conn()
    contrib_rows = []
    try:
        # === 1. –í—Å–µ –≤–∫–ª–∞–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
        contrib_rows = await conn.fetch("""
            SELECT s.name, s.status, c.amount
            FROM contributions c
            JOIN supplies s ON c.supply_id = s.id
            WHERE c.user_id = $1
        """, user_id)

        if not contrib_rows:
            await call.answer("–í—ã –µ—â—ë –Ω–µ –¥–µ–ª–∞–ª–∏ –≤–∫–ª–∞–¥–æ–≤.", show_alert=True)
            return

        # 1. –û–±—â–∞—è —Å—É–º–º–∞ –≤–∫–ª–∞–¥–æ–≤
        total_invested = sum(row['amount'] for row in contrib_rows)

        # 2. –ü—Ä–∏–±—ã–ª—å –æ—Ç –ø—Ä–æ–¥–∞–∂ (—Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤–∫–∏)
        total_profit = 0
        for row in contrib_rows:
            supply_name, status, amount = row['name'], row['status'], row['amount']
            if status == "completed":
                profit = amount * 0.3  # 30% –ø—Ä–∏–±—ã–ª–∏
                total_profit += profit

        # 3. –°–∞–º—ã–π –±–æ–ª—å—à–æ–π –≤–∫–ª–∞–¥
        biggest_contrib = max(contrib_rows, key=lambda x: x['amount'])
        biggest_contrib_amount = biggest_contrib['amount']
        biggest_contrib_supply = biggest_contrib['name']

        # 4. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–∞–≤–æ–∫
        num_supplies = len(contrib_rows)

        # 5. –°–∞–º–∞—è —É–¥–∞—á–Ω–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞ (–ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É –ø—Ä–∏–±—ã–ª–∏)
        best_supply = None
        best_ratio = 0
        for row in contrib_rows:
            supply_name, status, amount = row['name'], row['status'], row['amount']
            if status == "completed":
                profit = amount * 0.3
                ratio = profit / amount  # –º–æ–∂–Ω–æ —É–º–Ω–æ–∂–∏—Ç—å –Ω–∞ 100 –¥–ª—è %
                if ratio > best_ratio:
                    best_ratio = ratio
                    best_supply = supply_name

        # 6. –ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ
        top_rows = await conn.fetch("""
            SELECT user_id, SUM(amount) as total
            FROM contributions
            GROUP BY user_id
            ORDER BY total DESC
        """)
    finally:
        await conn.close()

    my_total = total_invested
    my_rank = 1
    for row in top_rows:
        if row['total'] >= my_total:
            my_rank += 1
        else:
            break
    my_rank -= 1  # –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ

    # === –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç ===
    text = (
        "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üí∏ –í—Å–µ–≥–æ –≤–ª–æ–∂–µ–Ω–æ: <b>{total_invested}‚ÇΩ</b>\n"
        f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ —Å –ø—Ä–æ–¥–∞–∂: <b>{total_profit:.2f}‚ÇΩ</b>\n"
        f"üèÜ –°–∞–º—ã–π –±–æ–ª—å—à–æ–π –≤–∫–ª–∞–¥: <b>{biggest_contrib_amount}‚ÇΩ</b> {biggest_contrib_supply}\n"
        f"üèÖ –ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ –ø–æ –≤–∫–ª–∞–¥–∞–º –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: <b>{my_rank}</b>\n"
        f"üéØ –°–∞–º–∞—è —É–¥–∞—á–Ω–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞: <b>{best_supply or '–ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö'}</b>\n"
        f"üì¶ –£—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –ø–æ—Å—Ç–∞–≤–∫–∞—Ö: <b>{num_supplies}</b>\n"
    )

    # === –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" ===
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])

    await call.message.edit_text(text, reply_markup=markup, parse_mode="HTML")

@dp.callback_query(F.data.startswith("approve_req_"))
async def approve_contribution_request(call: CallbackQuery, state: FSMContext):
    req_id = int(call.data.split("_")[2])

    conn = await get_db_conn()
    row = None
    try:
        row = await conn.fetchrow("SELECT user_id, bank, payment_info FROM contribution_requests WHERE id = $1", req_id)
    finally:
        await conn.close()

    if not row:
        await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    user_id, bank, info = row['user_id'], row['bank'], row['payment_info']

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É
    await state.update_data(req_id=req_id, temp_user_id=user_id)
    await state.set_state(MakeContribution.waiting_bank)  # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await call.message.edit_text(f"–°–∫–æ–ª—å–∫–æ –≤–Ω–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–≤ —Ä—É–±–ª—è—Ö)?")

@dp.message(MakeContribution.waiting_bank)
async def admin_enter_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0: raise ValueError
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return

    data = await state.get_data()
    req_id = data["req_id"]
    user_id = data["temp_user_id"]

    conn = await get_db_conn()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ—Å—Ç–∞–≤–∫—É
        supply_id = await get_latest_active_supply_id()
        if not supply_id:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏.")
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤–∫–ª–∞–¥
        existing = await conn.fetchrow("SELECT amount FROM contributions WHERE user_id = $1 AND supply_id = $2", user_id, supply_id)

        async with conn.transaction():
            if existing:
                new_amount = existing['amount'] + amount
                await conn.execute("UPDATE contributions SET amount = $1 WHERE user_id = $2 AND supply_id = $3",
                                    new_amount, user_id, supply_id)
            else:
                await conn.execute("INSERT INTO contributions (user_id, supply_id, amount) VALUES ($1, $2, $3)",
                                    user_id, supply_id, amount)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
            await conn.execute("UPDATE contribution_requests SET status = 'approved' WHERE id = $1", req_id)
    finally:
        await conn.close()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await bot.send_message(
            user_id,
            f"‚úÖ –í–∞—à –≤–∫–ª–∞–¥ –Ω–∞ {amount}‚ÇΩ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n"
            f"–û–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ—Å—Ç–∞–≤–∫—É #{supply_id}."
        )
    except Exception as e:
        print(f"Failed to send message to user {user_id}: {e}")

    await message.answer("‚úÖ –í–∫–ª–∞–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω.")
    await state.clear()
    await cmd_start(message)

# === –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username

    await state.clear()

    conn = await get_db_conn()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ—Å—Ç–∞–≤–∫—É
        supply_row = await conn.fetchrow("SELECT id FROM supplies WHERE status = 'active' ORDER BY id DESC LIMIT 1")
        supply_id = None
        if not supply_row:
            # –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º
            supply_id = await conn.fetchval(
                "INSERT INTO supplies (name, status) VALUES ($1, 'active') RETURNING id",
                f"–ü–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç {datetime.now().strftime('%d.%m.%Y')}"
            )
        else:
            supply_id = supply_row['id']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤–∫–ª–∞–¥ –≤ –≠–¢–û–ô –ø–æ—Å—Ç–∞–≤–∫–µ
        existing_contribution = await conn.fetchrow("SELECT 1 FROM contributions WHERE user_id = $1 AND supply_id = $2", user_id, supply_id)
        if not existing_contribution:
            await conn.execute("INSERT INTO contributions (user_id, supply_id, amount, username) VALUES ($1, $2, 0, $3)", user_id, supply_id, username)
        else:
            await conn.execute("UPDATE contributions SET username = $1 WHERE user_id = $2 AND supply_id = $3", username, user_id, supply_id)
    finally:
        await conn.close()

    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu(user_id))


async def get_latest_active_supply_id():
    conn = await get_db_conn()
    row = None
    try:
        row = await conn.fetchrow("SELECT id FROM supplies WHERE status = 'active' ORDER BY id DESC LIMIT 1")
    finally:
        await conn.close()
    return row['id'] if row else None


@dp.callback_query(F.data.startswith("user_item_"))
async def user_show_item_details(call: CallbackQuery):
    item_id = int(call.data.split("_")[2])
    user_id = call.from_user.id

    conn = await get_db_conn()
    row = None
    try:
        row = await conn.fetchrow("""
            SELECT title, price, sell_price, description, photo, is_sold, supply_id, status
            FROM items WHERE id = $1
        """, item_id)
        if not row:
            await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        title, price, sell_price, desc, photo_path, is_sold_db, supply_id, status = \
            row['title'], row['price'], row['sell_price'], row['description'], row['photo'], \
            row['is_sold'], row['supply_id'], row['status']

        # === –†–ê–°–ß–Å–¢ –î–û–õ–ò –í–ö–õ–ê–î–ê ===
        contrib_row = await conn.fetchrow("SELECT amount FROM contributions WHERE user_id = $1 AND supply_id = $2", user_id, supply_id)
        user_contribution = contrib_row['amount'] if contrib_row else 0

        all_contribs = await conn.fetch("SELECT user_id, amount FROM contributions WHERE supply_id = $1", supply_id)
        total = sum(c['amount'] for c in all_contribs)

        share = 0
        if total != 0:
            share = (user_contribution / total) * 100

        if user_id in ADMIN_IDS:
            other_users = [c['user_id'] for c in all_contribs if c['user_id'] not in ADMIN_IDS]
            N = len(other_users)
            if N > 0:
                share = min(share + 20.0, 100)
        else:
            admin_in_supply = any(c['user_id'] in ADMIN_IDS for c in all_contribs)
            if admin_in_supply:
                other_users = [c['user_id'] for c in all_contribs if c['user_id'] not in ADMIN_IDS]
                N = len(other_users)
                if N > 0:
                    deduction = 20.0 / N
                    share = max(share - deduction, 0)
    finally:
        await conn.close()

    # === –°–†–û–ö–ò ===
    arrival_text = "üöö –ü—Ä–∏–µ–¥–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ: <b>20‚Äì30 –¥–Ω–µ–π</b>"

    if sell_price < 5000:
        sale_time = "‚è± –ü—Ä–æ–¥–∞–∂–∞: <b>–ú–µ–Ω—å—à–µ –Ω–µ–¥–µ–ª–∏</b>"
    elif 5000 <= sell_price < 10000:
        sale_time = "‚è± –ü—Ä–æ–¥–∞–∂–∞: <b>5‚Äì10 –¥–Ω–µ–π</b>"
    elif 10000 <= sell_price < 15000:
        sale_time = "‚è± –ü—Ä–æ–¥–∞–∂–∞: <b>10‚Äì20 –¥–Ω–µ–π</b>"
    else:
        sale_time = "‚è± –ü—Ä–æ–¥–∞–∂–∞: <b>3 –Ω–µ–¥–µ–ª–∏ ‚Äì 2 –º–µ—Å—è—Ü–∞</b>"

    money_time = "üí∞ –î–µ–Ω—å–≥–∏: <b>—á–µ—Ä–µ–∑ 1‚Äì2 –¥–Ω—è –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏</b>"

    text = (
        f"üì¶ <b>{title}</b>\n\n"
        f"üí∞ –ó–∞–∫—É–ø–∫–∞: <b>{price}‚ÇΩ</b>\n"
        f"üéØ –ü—Ä–æ–¥–∞–∂–∞: <b>{sell_price}‚ÇΩ</b>\n"
        f"üè∑ –°—Ç–∞—Ç—É—Å: <b>{status}</b>\n"
        f"üìä –í–∞—à–∞ –¥–æ–ª—è: <b>{share:.1f}%</b>\n\n"
        f"{arrival_text}\n"
        f"{sale_time}\n"
        f"{money_time}\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{desc or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}"
    )

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"supply_user_{supply_id}")]
    ])

    if photo_path and os.path.exists(photo_path):
        try:
            await call.message.delete()
        except:
            pass
        await bot.send_photo(
            chat_id=call.message.chat.id,
            photo=FSInputFile(photo_path),
            caption=text,
            reply_markup=markup,
            parse_mode="HTML"
        )
    else:
        await call.message.answer(text, reply_markup=markup, parse_mode="HTML")

@dp.callback_query(F.data == "admin_create_supply")
async def admin_create_supply(call: CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return

    name = f"–ü–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç {datetime.now().strftime('%d.%m.%Y')}"

    conn = await get_db_conn()
    try:
        await conn.execute("INSERT INTO supplies (name, status) VALUES ($1, 'active')", name)
    finally:
        await conn.close()

    await call.answer(f"‚úÖ –ü–æ—Å—Ç–∞–≤–∫–∞ '{name}' —Å–æ–∑–¥–∞–Ω–∞!", show_alert=True)
    await admin_panel(call)

@dp.callback_query(F.data == "admin_delete_supply")
async def admin_delete_supply_start(call: CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return

    conn = await get_db_conn()
    supplies = []
    try:
        supplies = await conn.fetch("SELECT id, name FROM supplies WHERE status = 'active'")
    finally:
        await conn.close()

    if not supplies:
        await call.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤–æ–∫.", show_alert=True)
        return

    buttons = []
    for s in supplies:
        buttons.append([InlineKeyboardButton(text=s['name'], callback_data=f"confirm_delete_supply_{s['id']}")])
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")])

    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))


@dp.callback_query(F.data.startswith("confirm_delete_supply_"))
async def confirm_delete_supply(call: CallbackQuery):
    supply_id = int(call.data.split("_")[3])

    conn = await get_db_conn()
    name = None
    try:
        name = await conn.fetchval("SELECT name FROM supplies WHERE id = $1", supply_id)
    finally:
        await conn.close()

    if not name:
        await call.answer("–ü–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –í –ø—Ä–µ–¥—ã–¥—É—â–∏–µ", callback_data=f"move_supply_{supply_id}")],
        [InlineKeyboardButton(text="üíÄ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data=f"full_delete_supply_{supply_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
    ])
    await call.message.edit_text(f"–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –ø–æ—Å—Ç–∞–≤–∫–æ–π:\n\n<b>{name}</b>?", reply_markup=markup, parse_mode="HTML")


@dp.callback_query(F.data.startswith("move_supply_"))
async def move_supply_to_completed(call: CallbackQuery):
    supply_id = int(call.data.split("_")[2])

    conn = await get_db_conn()
    try:
        await conn.execute("UPDATE supplies SET status = 'completed' WHERE id = $1", supply_id)
    finally:
        await conn.close()

    await call.answer("‚úÖ –ü–æ—Å—Ç–∞–≤–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ '–ü—Ä–µ–¥—ã–¥—É—â–∏–µ'.")
    await admin_panel(call)


@dp.callback_query(F.data.startswith("full_delete_supply_"))
async def full_delete_supply(call: CallbackQuery):
    supply_id = int(call.data.split("_")[3])

    conn = await get_db_conn()
    try:
        async with conn.transaction():
            await conn.execute("DELETE FROM items WHERE supply_id = $1", supply_id)
            await conn.execute("DELETE FROM supplies WHERE id = $1", supply_id)
    finally:
        await conn.close()

    await call.answer("‚úÖ –ü–æ—Å—Ç–∞–≤–∫–∞ –∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã.")
    await admin_panel(call)

@dp.callback_query(F.data.startswith("admin_item_"))
async def admin_show_item_details(call: CallbackQuery, state: FSMContext):
    item_id = int(call.data.split("_")[2])

    await state.update_data(current_item_id=item_id)

    conn = await get_db_conn()
    row = None
    try:
        row = await conn.fetchrow("""
            SELECT title, price, sell_price, description, photo, is_sold, supply_id, status
            FROM items WHERE id = $1
        """, item_id)
    finally:
        await conn.close()

    if not row:
        await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    title, price, sell_price, desc, photo_path, is_sold_db, supply_id, status = \
        row['title'], row['price'], row['sell_price'], row['description'], row['photo'], \
        row['is_sold'], row['supply_id'], row['status']
    text = (
        f"üì¶ <b>{title}</b>\n\n"
        f"üí∞ –ó–∞–∫—É–ø–∫–∞: <b>{price}‚ÇΩ</b>\n"
        f"üéØ –ü—Ä–æ–¥–∞–∂–∞: <b>{sell_price}‚ÇΩ</b>\n"
        f"üè∑ –°—Ç–∞—Ç—É—Å: <b>{status}</b>\n"
        f"üì¶ –ü—Ä–æ–¥–∞–∂–∞: {'‚úÖ' if is_sold_db else 'üîÑ'}\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{desc or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}"
    )

    keyboard = []

    btn_text = "‚ùå –£–±—Ä–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É" if is_sold_db else "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–Ω–æ–µ"
    keyboard.append([InlineKeyboardButton(text=btn_text, callback_data=f"toggle_sold_{item_id}")])

    keyboard.append([
        InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data="admin_delete_item"),
        InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="admin_edit_item")
    ])

    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_supply_{supply_id}")])

    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    if photo_path and os.path.exists(photo_path):
        try:
            await call.message.delete()
        except:
            pass
        await bot.send_photo(
            chat_id=call.message.chat.id,
            photo=FSInputFile(photo_path),
            caption=text,
            reply_markup=markup,
            parse_mode="HTML"
        )
    else:
        try:
            await call.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
        except:
            await call.message.answer(text, reply_markup=markup, parse_mode="HTML")

# === 1. –ú–æ–π –≤–∫–ª–∞–¥ ===
@dp.callback_query(F.data == "my_contributions")
async def my_contributions(call: CallbackQuery):
    user_id = call.from_user.id

    conn = await get_db_conn()
    all_supplies = []
    contrib_dict = {}
    try:
        all_supplies = await conn.fetch("SELECT id, name FROM supplies WHERE status IN ('active', 'completed')")
        contrib_rows = await conn.fetch("SELECT supply_id, amount FROM contributions WHERE user_id = $1", user_id)
        contrib_dict = {row['supply_id']: row['amount'] for row in contrib_rows}
    finally:
        await conn.close()

    if not all_supplies:
        await call.answer("–ù–µ—Ç –ø–æ—Å—Ç–∞–≤–æ–∫.", show_alert=True)
        return

    buttons = []
    for s_id, s_name in [(s['id'], s['name']) for s in all_supplies]:
        amount = contrib_dict.get(s_id, 0)
        buttons.append([InlineKeyboardButton(text=f"{s_name} ‚Äî {amount}‚ÇΩ", callback_data=f"user_supply_{s_id}")])

    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])

    await call.message.answer("üì¶ –í–∞—à–∏ –ø–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
# === 2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É ===
@dp.callback_query(F.data == "view_supply")
async def view_supply(call: CallbackQuery):
    buttons = [
        [InlineKeyboardButton(text="üöö –ù—ã–Ω–µ—à–Ω—è—è –ø–æ—Å—Ç–∞–≤–∫–∞", callback_data="supply_list_current")],
        [InlineKeyboardButton(text="üì¶ –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏", callback_data="supply_list_completed")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∫—É:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@dp.callback_query(F.data.startswith("user_supply_"))
async def user_show_supply_details(call: CallbackQuery):
    supply_id = int(call.data.split("_")[2])
    user_id = call.from_user.id

    conn = await get_db_conn()
    supply_name = None
    supply_status = None
    user_amount = 0
    total_profit = 0
    expected_earnings = 0
    share = 0
    bank = "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
    payment_info = "–ù–µ —É–∫–∞–∑–∞–Ω—ã"

    try:
        supply_row = await conn.fetchrow("SELECT name, status FROM supplies WHERE id = $1", supply_id)
        if not supply_row:
            await call.answer("–ü–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        supply_name, supply_status = supply_row['name'], supply_row['status']

        contrib_row = await conn.fetchrow("SELECT amount FROM contributions WHERE user_id = $1 AND supply_id = $2", user_id, supply_id)
        user_amount = contrib_row['amount'] if contrib_row else 0

        items = await conn.fetch("SELECT price, sell_price FROM items WHERE supply_id = $1", supply_id)

        if items:
            total_cost = sum(item['price'] for item in items)
            total_revenue = sum(item['sell_price'] for item in items)
            total_profit = total_revenue - total_cost

            total_contrib = await conn.fetchval("SELECT COALESCE(SUM(amount), 0) FROM contributions WHERE supply_id = $1", supply_id)

            if total_contrib > 0:
                share = user_amount / total_contrib
            else:
                share = 0

            if user_id in ADMIN_IDS:
                other_share = 1 - share
                bonus = 0.2 * other_share
                share = min(share + bonus, 1)

            expected_earnings = round(total_profit * share, 2)

        req_row = await conn.fetchrow("SELECT bank, payment_info FROM contribution_requests WHERE user_id = $1 AND status = 'pending' ORDER BY id DESC LIMIT 1", user_id)
        bank = req_row['bank'] if req_row else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
        payment_info = req_row['payment_info'] if req_row else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"

    finally:
        await conn.close()

    text = (
        f"üì¶ <b>{supply_name}</b>\n\n"
        f"üöö –ü—Ä–∏–µ–¥–µ—Ç: <b>20‚Äì30 –¥–Ω–µ–π</b>\n"
        f"‚è± –ü—Ä–æ–¥–∞–∂–∞: <b>–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ü–µ–Ω—ã</b>\n"
        f"üí∞ –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: <b>{expected_earnings}‚ÇΩ</b>\n"
        f"üí∏ –í–∞—à –≤–∫–ª–∞–¥: <b>{user_amount}‚ÇΩ</b>\n"
        f"üìä –í–∞—à–∞ –¥–æ–ª—è: <b>{share*100:.1f}%</b>\n\n"
        f"üè¶ –ë–∞–Ω–∫: <b>{bank}</b>\n"
        f"üì±/üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: <code>{payment_info}</code>"
    )

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="user_start_contribution")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="my_contributions")]
    ])

    await call.message.edit_text(text, reply_markup=markup, parse_mode="HTML")

@dp.callback_query(F.data.startswith("supply_list_"))
async def show_supply_list(call: CallbackQuery):
    supply_type = call.data.split("_")[2]

    conn = await get_db_conn()
    supplies = []
    try:
        if supply_type == "current":
            supplies = await conn.fetch("SELECT id, name FROM supplies WHERE status = 'active'")
        else:
            supplies = await conn.fetch("SELECT id, name FROM supplies WHERE status = 'completed'")
    finally:
        await conn.close()

    buttons = []
    for s in supplies:
        buttons.append([InlineKeyboardButton(text=s['name'], callback_data=f"supply_user_{s['id']}")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="view_supply")])
    await call.message.answer(f"–°–ø–∏—Å–æ–∫ {supply_type} –ø–æ—Å—Ç–∞–≤–æ–∫:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@dp.callback_query(F.data == "admin_view_supply")
async def admin_view_supply(call: CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return

    conn = await get_db_conn()
    supplies = []
    try:
        supplies = await conn.fetch("SELECT id, name FROM supplies WHERE status = 'active'")
    finally:
        await conn.close()

    if not supplies:
        await call.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏.", show_alert=True)
        return

    buttons = []
    for s in supplies:
        buttons.append([InlineKeyboardButton(text=s['name'], callback_data=f"admin_supply_{s['id']}")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")])
    try:
        await call.message.edit_text("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    except:
        await call.message.answer("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@dp.callback_query(F.data.startswith("supply_user_"))
async def user_show_supply_items(call: CallbackQuery):
    supply_id = int(call.data.split("_")[2])
    conn = await get_db_conn()
    name_row = None
    try:
        name_row = await conn.fetchrow("SELECT name FROM supplies WHERE id = $1", supply_id)
    finally:
        await conn.close()

    if not name_row:
        await call.answer("–ü–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    await call.message.answer(
        f"üì¶ –¢–æ–≤–∞—Ä—ã –≤ –ø–æ—Å—Ç–∞–≤–∫–µ: {name_row['name']}",
        reply_markup=await get_item_list_keyboard(supply_id, for_admin=False)
    )

@dp.callback_query(F.data.startswith("admin_supply_"))
async def admin_show_supply_items(call: CallbackQuery):
    supply_id = int(call.data.split("_")[2])
    conn = await get_db_conn()
    name_row = None
    items = []
    try:
        name_row = await conn.fetchrow("SELECT name FROM supplies WHERE id = $1", supply_id)
        if not name_row:
            await call.answer("–ü–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        items = await conn.fetch("SELECT id, title, price, is_sold FROM items WHERE supply_id = $1", supply_id)
    finally:
        await conn.close()

    buttons = []
    for item in items:
        item_id, title, price, is_sold = item['id'], item['title'], item['price'], item['is_sold']
        status = "‚úÖ" if is_sold else "üîÑ"
        text = f"{title} ‚Äî {price}‚ÇΩ {status}"
        buttons.append([InlineKeyboardButton(text=text, callback_data=f"admin_item_{item_id}")]) # Changed callback to admin_item_

    buttons.append([InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã", callback_data=f"delete_all_{supply_id}")])
    buttons.append([InlineKeyboardButton(text="üîÅ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö", callback_data=f"bulk_status_{supply_id}")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_view_supply")])
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await call.message.answer(f"üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–æ–π: {name_row['name']}", reply_markup=markup)

@dp.callback_query(F.data.startswith("delete_all_"))
async def confirm_delete_all(call: CallbackQuery):
    supply_id = int(call.data.split("_")[2])
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å—ë", callback_data=f"confirm_delete_all_{supply_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_view_supply")]
    ])
    await call.message.edit_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å **–≤—Å–µ —Ç–æ–≤–∞—Ä—ã** –∏–∑ —ç—Ç–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏?", reply_markup=markup, parse_mode="Markdown")

@dp.callback_query(F.data.startswith("confirm_delete_all_"))
async def delete_all_items(call: CallbackQuery):
    supply_id = int(call.data.split("_")[3])
    conn = await get_db_conn()
    try:
        await conn.execute("DELETE FROM items WHERE supply_id = $1", supply_id)
    finally:
        await conn.close()
    await call.message.edit_text("üóë –í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã.")
    await admin_view_supply(call)

STATUSES = ["–ö—É–ø–ª–µ–Ω", "–í –ø—É—Ç–∏", "–ù–∞ —Å–∫–ª–∞–¥–µ", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω", "–ü—Ä–æ–¥–∞–Ω"] # Define STATUSES for bulk_status_prompt

@dp.callback_query(F.data.startswith("bulk_status_"))
async def bulk_status_prompt(call: CallbackQuery, state: FSMContext):
    supply_id = int(call.data.split("_")[2])
    await state.update_data(bulk_supply_id=supply_id)
    buttons = []
    for status in STATUSES:
        buttons.append([InlineKeyboardButton(text=status, callback_data=f"apply_bulk_status_{status.replace(' ', '_')}")]) # Replace spaces for callback data
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_view_supply")])
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è **–≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤** –≤ –ø–æ—Å—Ç–∞–≤–∫–µ:", reply_markup=markup, parse_mode="Markdown")

@dp.callback_query(F.data.startswith("apply_bulk_status_"))
async def apply_bulk_status(call: CallbackQuery, state: FSMContext):
    status = call.data.replace("apply_bulk_status_", "").replace("_", " ")
    data = await state.get_data()
    supply_id = data["bulk_supply_id"]
    conn = await get_db_conn()
    try:
        await conn.execute("UPDATE items SET status = $1 WHERE supply_id = $2", status, supply_id)
    finally:
        await conn.close()
    await call.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {status}")
    await admin_view_supply(call)

@dp.callback_query(F.data == "admin_add_contribution")
async def admin_add_contribution_start(call: CallbackQuery, state: FSMContext):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return

    conn = await get_db_conn()
    supplies = []
    try:
        supplies = await conn.fetch("SELECT id, name FROM supplies WHERE status = 'active'")
    finally:
        await conn.close()

    if not supplies:
        await call.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤–æ–∫. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –ø–æ—Å—Ç–∞–≤–∫—É.")
        return

    # If only one active supply, proceed directly, else let admin choose
    if len(supplies) == 1:
        await state.update_data(supply_id=supplies[0]['id'])
        await state.set_state(AddContribution.waiting_username)
        await call.message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ <b>—é–∑–µ—Ä–Ω–µ–π–º</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, @ivan_123 –∏–ª–∏ ivan_123):", parse_mode="HTML")
    else:
        buttons = []
        for s in supplies:
            buttons.append([InlineKeyboardButton(text=s['name'], callback_data=f"select_supply_for_contrib_{s['id']}")])
        buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")])
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        await call.message.answer("üì¶ –í –∫–∞–∫—É—é –ø–æ—Å—Ç–∞–≤–∫—É –¥–æ–±–∞–≤–∏—Ç—å –≤–∫–ª–∞–¥?", reply_markup=markup)

@dp.callback_query(F.data.startswith("select_supply_for_contrib_"))
async def select_supply_for_contribution(call: CallbackQuery, state: FSMContext):
    supply_id = int(call.data.split("_")[4])
    await state.update_data(supply_id=supply_id)
    await state.set_state(AddContribution.waiting_username)
    await call.message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ <b>—é–∑–µ—Ä–Ω–µ–π–º</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, @ivan_123 –∏–ª–∏ ivan_123):", parse_mode="HTML")

@dp.callback_query(F.data.startswith("supply_"))
async def show_supply_items(call: CallbackQuery):
    data = call.data.split("_")
    supply_id = int(data[1])
    is_admin = call.from_user.id in ADMIN_IDS
    conn = await get_db_conn()
    name_row = None
    try:
        name_row = await conn.fetchrow("SELECT name FROM supplies WHERE id = $1", supply_id)
    finally:
        await conn.close()

    if not name_row:
        await call.answer("–ü–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    await call.message.answer(
        f"üì¶ –¢–æ–≤–∞—Ä—ã –≤ –ø–æ—Å—Ç–∞–≤–∫–µ: {name_row['name']}",
        reply_markup=await get_item_list_keyboard(supply_id, for_admin=is_admin)
    )

# The original code had a duplicate `show_supply_items` function. I'm keeping only one,
# the one that was more complete, and adjusting the callback_data handling.

# New handlers for adding/editing items (placeholder for now, as they were not fully provided in original)
# This requires knowing the FSM states and corresponding message handlers.
# I'll add the general structure based on existing FSMs for AddItem, EditItem.

# Handler for "toggle_sold"
@dp.callback_query(F.data.startswith("toggle_sold_"))
async def toggle_item_sold_status(call: CallbackQuery):
    item_id = int(call.data.split("_")[2])
    conn = await get_db_conn()
    try:
        # Get current status
        current_status = await conn.fetchval("SELECT is_sold FROM items WHERE id = $1", item_id)
        new_status = not current_status
        await conn.execute("UPDATE items SET is_sold = $1 WHERE id = $2", new_status, item_id)
    finally:
        await conn.close()
    await call.answer("–°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ –∏–∑–º–µ–Ω—ë–Ω.")
    # Refresh item details view
    await admin_show_item_details(call, dp.fsm.storage) # Pass storage to reuse state

# Handler for "admin_delete_item" (requires item_id from state)
@dp.callback_query(F.data == "admin_delete_item")
async def admin_delete_item(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    item_id = data.get("current_item_id")
    if not item_id:
        await call.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        return

    conn = await get_db_conn()
    try:
        await conn.execute("DELETE FROM items WHERE id = $1", item_id)
    finally:
        await conn.close()
    await call.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω.")
    await state.clear()
    await admin_panel(call) # Return to admin panel

# Handler for "admin_edit_item" (starts FSM)
@dp.callback_query(F.data == "admin_edit_item")
async def admin_edit_item_start(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    item_id = data.get("current_item_id")
    if not item_id:
        await call.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    conn = await get_db_conn()
    item_data = None
    try:
        item_data = await conn.fetchrow("SELECT title, price, sell_price, description, photo FROM items WHERE id = $1", item_id)
    finally:
        await conn.close()

    if not item_data:
        await call.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await state.update_data(
        item_to_edit_id=item_id,
        original_title=item_data['title'],
        original_price=item_data['price'],
        original_sell_price=item_data['sell_price'],
        original_description=item_data['description'],
        original_photo=item_data['photo']
    )
    await state.set_state(EditItem.waiting_new_title)
    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Ç–µ–∫—É—â–µ–µ: {item_data['title']}):")

@dp.message(EditItem.waiting_new_title)
async def process_new_item_title(message: Message, state: FSMContext):
    await state.update_data(new_title=message.text)
    await state.set_state(EditItem.waiting_new_price)
    data = await state.get_data()
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–∫—É–ø–æ—á–Ω—É—é —Ü–µ–Ω—É (—Ç–µ–∫—É—â–∞—è: {data['original_price']}):")

@dp.message(EditItem.waiting_new_price)
async def process_new_item_price(message: Message, state: FSMContext):
    try:
        new_price = float(message.text)
        if new_price <= 0: raise ValueError
        await state.update_data(new_price=new_price)
        await state.set_state(EditItem.waiting_new_sell_price)
        data = await state.get_data()
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ (—Ç–µ–∫—É—â–∞—è: {data['original_sell_price']}):")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@dp.message(EditItem.waiting_new_sell_price)
async def process_new_item_sell_price(message: Message, state: FSMContext):
    try:
        new_sell_price = float(message.text)
        if new_sell_price <= 0: raise ValueError
        await state.update_data(new_sell_price=new_sell_price)
        await state.set_state(EditItem.waiting_new_description)
        data = await state.get_data()
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Ç–µ–∫—É—â–µ–µ: {data['original_description'] or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}):")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@dp.message(EditItem.waiting_new_description)
async def process_new_item_description(message: Message, state: FSMContext):
    await state.update_data(new_description=message.text)
    await state.set_state(EditItem.waiting_new_photo)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ.",
                         reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photo_edit")]]))

@dp.message(EditItem.waiting_new_photo, F.photo)
async def process_new_item_photo(message: Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    file = await bot.get_file(file_id)
    filename = f"photos/{file.file_id}.jpg"
    await bot.download_file(file.file_path, filename)
    await state.update_data(new_photo=filename)
    await save_edited_item(message, state)

@dp.callback_query(EditItem.waiting_new_photo, F.data == "skip_photo_edit")
async def skip_item_photo_edit(call: CallbackQuery, state: FSMContext):
    await state.update_data(new_photo=None) # Keep existing photo
    await save_edited_item(call.message, state)


async def save_edited_item(message: Message, state: FSMContext):
    data = await state.get_data()
    item_id = data['item_to_edit_id']
    new_title = data['new_title']
    new_price = data['new_price']
    new_sell_price = data['new_sell_price']
    new_description = data['new_description']
    new_photo = data.get('new_photo') # This will be None if skipped, or path if new photo uploaded

    conn = await get_db_conn()
    try:
        if new_photo is not None:
            await conn.execute(
                "UPDATE items SET title = $1, price = $2, sell_price = $3, description = $4, photo = $5 WHERE id = $6",
                new_title, new_price, new_sell_price, new_description, new_photo, item_id
            )
        else: # Keep existing photo
            await conn.execute(
                "UPDATE items SET title = $1, price = $2, sell_price = $3, description = $4 WHERE id = $5",
                new_title, new_price, new_sell_price, new_description, item_id
            )
    finally:
        await conn.close()

    await message.answer("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!")
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu(message.from_user.id))

# Handler for "admin_add_item" (starts FSM)
@dp.callback_query(F.data == "admin_add_item")
async def admin_add_item_start(call: CallbackQuery, state: FSMContext):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return

    conn = await get_db_conn()
    supplies = []
    try:
        supplies = await conn.fetch("SELECT id, name FROM supplies WHERE status = 'active'")
    finally:
        await conn.close()

    if not supplies:
        await call.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤–æ–∫. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –ø–æ—Å—Ç–∞–≤–∫—É.")
        return

    # If only one active supply, proceed directly, else let admin choose
    if len(supplies) == 1:
        await state.update_data(supply_id=supplies[0]['id'])
        await state.set_state(AddItem.waiting_title)
        await call.message.answer("üì¶ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    else:
        buttons = []
        for s in supplies:
            buttons.append([InlineKeyboardButton(text=s['name'], callback_data=f"select_supply_add_item_{s['id']}")])
        buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")])
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∫—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä:", reply_markup=markup)

@dp.callback_query(F.data.startswith("select_supply_add_item_"))
async def select_supply_for_add_item(call: CallbackQuery, state: FSMContext):
    supply_id = int(call.data.split("_")[4])
    await state.update_data(supply_id=supply_id)
    await state.set_state(AddItem.waiting_title)
    await call.message.answer("üì¶ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@dp.message(AddItem.waiting_title)
async def add_item_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(AddItem.waiting_price)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –∑–∞–∫—É–ø–æ—á–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ):")

@dp.message(AddItem.waiting_price)
async def add_item_price(message: Message, state: FSMContext):
    try:
        price = float(message.text)
        if price <= 0: raise ValueError
        await state.update_data(price=price)
        await state.set_state(AddItem.waiting_sell_price)
        await message.answer("üéØ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏ (—á–∏—Å–ª–æ):")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@dp.message(AddItem.waiting_sell_price)
async def add_item_sell_price(message: Message, state: FSMContext):
    try:
        sell_price = float(message.text)
        if sell_price <= 0: raise ValueError
        await state.update_data(sell_price=sell_price)
        await state.set_state(AddItem.waiting_description)
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@dp.message(AddItem.waiting_description)
async def add_item_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AddItem.waiting_photo)
    await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:")

@dp.message(AddItem.waiting_photo, F.photo)
async def add_item_photo(message: Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    file = await bot.get_file(file_id)
    filename = f"photos/{file.file_id}.jpg"
    await bot.download_file(file.file_path, filename)
    await state.update_data(photo=filename)

    data = await state.get_data()
    supply_id = data.get("supply_id") # Get supply_id from FSM

    if not supply_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∞.")
        await state.clear()
        return

    conn = await get_db_conn()
    try:
        await conn.execute(
            "INSERT INTO items (supply_id, title, price, sell_price, description, photo) VALUES ($1, $2, $3, $4, $5, $6)",
            supply_id, data['title'], data['price'], data['sell_price'], data['description'], filename
        )
    finally:
        await conn.close()

    await message.answer("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu(message.from_user.id))

# === –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
@dp.callback_query(F.data == "back_to_main")
async def back_to_main(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu(call.from_user.id))

# === –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å ===
@dp.callback_query(F.data == "admin_panel")
async def admin_panel(call: CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return
    await call.message.edit_text("‚öôÔ∏è –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_panel())

# === Make Contribution (User) ===
@dp.callback_query(F.data == "make_contribution")
async def make_contribution_start(call: CallbackQuery, state: FSMContext):
    await state.set_state(MakeContribution.waiting_bank)
    await call.message.answer(
        "üè¶ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –°–±–µ—Ä–±–∞–Ω–∫, –¢–∏–Ω—å–∫–æ—Ñ—Ñ):"
    )

@dp.message(MakeContribution.waiting_bank)
async def process_user_bank(message: Message, state: FSMContext):
    await state.update_data(bank=message.text)
    await state.set_state(MakeContribution.waiting_payment_info)
    await message.answer(
        "üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –∫–∞—Ä—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –¥–µ–Ω—å–≥–∏ –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—Ç–∞/–≤—ã–ø–ª–∞—Ç—ã:"
    )

@dp.message(MakeContribution.waiting_payment_info)
async def process_user_payment_info(message: Message, state: FSMContext):
    await state.update_data(payment_info=message.text)
    data = await state.get_data()
    bank = data['bank']
    payment_info = data['payment_info']

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_contribution_details")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_contribution")]
    ])

    await message.answer(
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
        f"üè¶ –ë–∞–Ω–∫: <b>{bank}</b>\n"
        f"üì±/üí≥: <code>{payment_info}</code>\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=markup,
        parse_mode="HTML"
    )
    await state.set_state(MakeContribution.waiting_confirm)


@dp.callback_query(MakeContribution.waiting_confirm, F.data == "confirm_contribution_details")
async def confirm_user_contribution(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = call.from_user.id
    username = call.from_user.username
    bank = data['bank']
    payment_info = data['payment_info']

    conn = await get_db_conn()
    try:
        # Check if an existing request needs to be updated or new one inserted
        existing_req = await conn.fetchrow(
            "SELECT id FROM contribution_requests WHERE user_id = $1 AND status = 'pending'",
            user_id
        )
        if existing_req:
            await conn.execute(
                "UPDATE contribution_requests SET username = $1, bank = $2, payment_info = $3 WHERE id = $4",
                username, bank, payment_info, existing_req['id']
            )
        else:
            await conn.execute(
                "INSERT INTO contribution_requests (user_id, username, bank, payment_info) VALUES ($1, $2, $3, $4)",
                user_id, username, bank, payment_info
            )
    finally:
        await conn.close()

    await state.clear()
    await call.answer("‚úÖ –í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤–∫–ª–∞–¥.", show_alert=True)
    await call.message.edit_text(PAYMENT_DETAILS + "\n\n–°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω—É –æ —Å–≤–æ—ë–º –≤–∫–ª–∞–¥–µ, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.", parse_mode="HTML")
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu(user_id))


@dp.callback_query(MakeContribution.waiting_confirm, F.data == "cancel_contribution")
async def cancel_user_contribution(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.answer("‚ùå –í–≤–æ–¥ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –æ—Ç–º–µ–Ω—ë–Ω.", show_alert=True)
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu(call.from_user.id))

# User starts editing their contribution details (used from user_show_supply_details)
@dp.callback_query(F.data == "user_start_contribution")
async def user_start_contribution_edit(call: CallbackQuery, state: FSMContext):
    await make_contribution_start(call, state)


# New handlers for admin_view_contributions
@dp.callback_query(F.data == "admin_view_contributions")
async def admin_view_contributions(call: CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return

    conn = await get_db_conn()
    contributions = []
    try:
        contributions = await conn.fetch("""
            SELECT c.user_id, c.username, s.name as supply_name, c.amount
            FROM contributions c
            JOIN supplies s ON c.supply_id = s.id
            ORDER BY supply_name, c.amount DESC
        """)
    finally:
        await conn.close()

    if not contributions:
        await call.answer("–í–∫–ª–∞–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.", show_alert=True)
        return

    text = "üìä <b>–í—Å–µ –≤–∫–ª–∞–¥—ã:</b>\n\n"
    current_supply_name = ""
    for contrib in contributions:
        if contrib['supply_name'] != current_supply_name:
            text += f"\nüì¶ <b>{contrib['supply_name']}</b>\n"
            current_supply_name = contrib['supply_name']
        text += f"  üë§ @{contrib['username'] or contrib['user_id']}: {contrib['amount']}‚ÇΩ\n"

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ])

    await call.message.answer(text, reply_markup=markup, parse_mode="HTML")


@dp.callback_query(F.data.startswith("reject_req_"))
async def reject_contribution_request(call: CallbackQuery):
    req_id = int(call.data.split("_")[2])

    conn = await get_db_conn()
    try:
        row = await conn.fetchrow("SELECT user_id, username FROM contribution_requests WHERE id = $1", req_id)
        if not row:
            await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        user_id = row['user_id']
        username = row['username']

        await conn.execute("UPDATE contribution_requests SET status = 'rejected' WHERE id = $1", req_id)
    finally:
        await conn.close()

    try:
        await bot.send_message(user_id, f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–∫–ª–∞–¥ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    except Exception as e:
        print(f"Failed to notify user {user_id} about rejected request: {e}")

    await call.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    await admin_view_requests(call) # Refresh the list of pending requests

# Main function to run the bot
async def main():
    await init_db() # Initialize database before starting bot
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())