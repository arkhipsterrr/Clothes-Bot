import asyncio
import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import sqlite3
from datetime import datetime
import os

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.getenv("API_TOKEN")  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
ADMIN_IDS = [1453081434]  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–∏ ID
PAYMENT_DETAILS = (
    "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤–∫–ª–∞–¥–∞:\n"
    "–ü—Ä–∏–Ω–∏–º–∞—é –¢–û–õ–¨–ö–û –¢-–ë–ê–ù–ö!!!\n"
    "–ö–∞—Ä—Ç–∞: 2200 7010 4325 8000\n"
    "–¢–µ–ª–µ—Ñ–æ–Ω: +79219753645\n"
    "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –í–∫–ª–∞–¥ –≤ –ø–æ—Å—Ç–∞–≤–∫—É"
)

# === –ü–ê–ü–ö–ò ===
os.makedirs("photos", exist_ok=True)
DB_NAME = "supplies.db"

# === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
def init_db():
    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()

    # === –ü–æ—Å—Ç–∞–≤–∫–∏ ===
    cur.execute("""
        CREATE TABLE IF NOT EXISTS supplies (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            status TEXT DEFAULT 'active'
        )
    """)

    # === –¢–æ–≤–∞—Ä—ã ===
    cur.execute("""
        CREATE TABLE IF NOT EXISTS items (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            supply_id INTEGER,
            title TEXT,
            price REAL,
            sell_price REAL,
            description TEXT,
            photo TEXT,
            is_sold INTEGER DEFAULT 0,
            FOREIGN KEY(supply_id) REFERENCES supplies(id)
        )
    """)

    # === –í–∫–ª–∞–¥—ã ===
    cur.execute("""
        CREATE TABLE IF NOT EXISTS contributions (
            user_id INTEGER,
            supply_id INTEGER,
            amount REAL,
            username TEXT,
            PRIMARY KEY (user_id, supply_id)
        )
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS contribution_requests (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            bank TEXT,
            payment_info TEXT,
            status TEXT DEFAULT 'pending'  -- pending, approved, rejected
        )
    """)

    # === –î–û–ë–ê–í–õ–Ø–ï–ú –°–¢–û–õ–ë–ï–¶ status, –ï–°–õ–ò –ï–ì–û –ù–ï–¢ ===
    cur.execute("PRAGMA table_info(items)")
    columns = [col[1] for col in cur.fetchall()]
    if 'status' not in columns:
        cur.execute("ALTER TABLE items ADD COLUMN status TEXT DEFAULT '–ö—É–ø–ª–µ–Ω'")

    # === –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ—Å—Ç–∞–≤–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç ===
    cur.execute("SELECT COUNT(*) FROM supplies")
    if cur.fetchone()[0] == 0:
        cur.execute("INSERT INTO supplies (name, status) VALUES ('–ü–æ—Å—Ç–∞–≤–∫–∞ #1', 'active')")

    conn.commit()
    conn.close()

init_db()

# === FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ===
# === FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ===
class AddItem(StatesGroup):
    waiting_title = State()
    waiting_price = State()
    waiting_sell_price = State()
    waiting_description = State()
    waiting_photo = State()

# === FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–∞ ===
class AddContribution(StatesGroup):
    waiting_username = State()
    waiting_amount = State()

class EditItem(StatesGroup):
    waiting_new_title = State()
    waiting_new_price = State()
    waiting_new_sell_price = State()
    waiting_new_description = State()
    waiting_new_photo = State()

class MakeContribution(StatesGroup):
    waiting_bank = State()
    waiting_payment_info = State()
    waiting_confirm = State()
# === –ë–û–¢ ===
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# === –ö–õ–ê–í–ò–ê–¢–£–†–´ ===
def get_main_menu(user_id):
    buttons = [
        [InlineKeyboardButton(text="1. –ú–æ–π –≤–∫–ª–∞–¥", callback_data="my_contributions")],
        [InlineKeyboardButton(text="2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É", callback_data="view_supply")],
        [InlineKeyboardButton(text="3. –°–¥–µ–ª–∞—Ç—å –≤–∫–ª–∞–¥", callback_data="make_contribution")]
    ]
    if user_id in ADMIN_IDS:
        buttons.append([InlineKeyboardButton(text="4. –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_supply_list_keyboard(supply_type):
    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    if supply_type == "current":
        cur.execute("SELECT id, name FROM supplies WHERE status = 'active'")
    else:
        cur.execute("SELECT id, name FROM supplies WHERE status = 'completed'")
    supplies = cur.fetchall()
    conn.close()

    buttons = []
    for s in supplies:
        buttons.append([InlineKeyboardButton(text=s[1], callback_data=f"supply_{s[0]}_{supply_type}")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_item_list_keyboard(supply_id, for_admin=False):
    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("SELECT id, title, price, is_sold FROM items WHERE supply_id = ?", (supply_id,))
    items = cur.fetchall()
    conn.close()

    buttons = []
    for item in items:
        item_id, title, price, is_sold = item
        status = "‚úÖ" if is_sold else "üîÑ"
        text = f"{title} ‚Äî {price}‚ÇΩ {status}"
        callback = f"admin_item_{item_id}" if for_admin else f"user_item_{item_id}"
        buttons.append([InlineKeyboardButton(text=text, callback_data=callback)])

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    back_callback = "admin_view_supply" if for_admin else "view_supply"
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback)])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_admin_panel():
    buttons = [
        [InlineKeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∫–ª–∞–¥—ã –ª—é–¥–µ–π", callback_data="admin_view_contributions")],
        [InlineKeyboardButton(text="üì¨ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤–∫–ª–∞–¥—ã", callback_data="admin_view_requests")],  # ‚Üê –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∫–ª–∞–¥", callback_data="admin_add_contribution")],
        [InlineKeyboardButton(text="üì¶ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É", callback_data="admin_add_item")],
        [InlineKeyboardButton(text="üîç –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å—Ç–∞–≤–∫–æ–π", callback_data="admin_view_supply")],
        [InlineKeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É", callback_data="admin_create_supply")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É", callback_data="admin_delete_supply")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@dp.callback_query(F.data == "admin_view_requests")
async def admin_view_requests(call: CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        return

    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("SELECT id, user_id, username, bank, payment_info FROM contribution_requests WHERE status = 'pending'")
    requests = cur.fetchall()
    conn.close()

    if not requests:
        await call.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫.", show_alert=True)
        return

    for req in requests:
        req_id, user_id, username, bank, info = req
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_req_{req_id}")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_req_{req_id}")]
        ])
        await call.message.answer(
            f"üì¨ –ó–∞—è–≤–∫–∞ #{req_id}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username or user_id}\n"
            f"üè¶ –ë–∞–Ω–∫: {bank}\n"
            f"üì±/üí≥: <code>{info}</code>",
            reply_markup=markup,
            parse_mode="HTML"
        )

@dp.callback_query(F.data.startswith("approve_req_"))
async def approve_contribution_request(call: CallbackQuery, state: FSMContext):
    req_id = int(call.data.split("_")[2])

    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("SELECT user_id, bank, payment_info FROM contribution_requests WHERE id = ?", (req_id,))
    row = cur.fetchone()
    if not row:
        await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    user_id, bank, info = row

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É
    await state.update_data(req_id=req_id, temp_user_id=user_id)
    await state.set_state(MakeContribution.waiting_bank)  # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await call.message.edit_text(f"–°–∫–æ–ª—å–∫–æ –≤–Ω–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–≤ —Ä—É–±–ª—è—Ö)?")

@dp.message(MakeContribution.waiting_bank)
async def admin_enter_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0: raise ValueError
    except:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return

    data = await state.get_data()
    req_id = data["req_id"]
    user_id = data["temp_user_id"]

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ—Å—Ç–∞–≤–∫—É
    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("SELECT id FROM supplies WHERE status = 'active' LIMIT 1")
    supply_row = cur.fetchone()
    if not supply_row:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏.")
        await state.clear()
        return

    supply_id = supply_row[0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤–∫–ª–∞–¥
    cur.execute("SELECT amount FROM contributions WHERE user_id = ? AND supply_id = ?", (user_id, supply_id))
    existing = cur.fetchone()

    if existing:
        new_amount = existing[0] + amount
        cur.execute("UPDATE contributions SET amount = ? WHERE user_id = ? AND supply_id = ?",
                    (new_amount, user_id, supply_id))
    else:
        cur.execute("INSERT INTO contributions (user_id, supply_id, amount) VALUES (?, ?, ?)",
                    (user_id, supply_id, amount))

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    cur.execute("UPDATE contribution_requests SET status = 'approved' WHERE id = ?", (req_id,))
    conn.commit()
    conn.close()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await bot.send_message(
            user_id,
            f"‚úÖ –í–∞—à –≤–∫–ª–∞–¥ –Ω–∞ {amount}‚ÇΩ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n"
            f"–û–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ—Å—Ç–∞–≤–∫—É #{supply_id}."
        )
    except:
        pass

    await message.answer("‚úÖ –í–∫–ª–∞–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω.")
    await state.clear()
    await cmd_start(message)  # ‚ùå –û–®–ò–ë–ö–ê –ó–î–ï–°–¨

# === –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None

    await state.clear()

    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("SELECT 1 FROM contributions WHERE user_id = ? LIMIT 1", (user_id,))
    if not cur.fetchone():
        cur.execute("INSERT INTO contributions (user_id, username, amount) VALUES (?, ?, 0)",
                    (user_id, username))
    else:
        cur.execute("UPDATE contributions SET username = ? WHERE user_id = ?", (username, user_id))
    conn.commit()
    conn.close()

    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu(user_id))


@dp.callback_query(F.data.startswith("user_item_"))
async def user_show_item_details(call: CallbackQuery):
    item_id = int(call.data.split("_")[2])

    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("""
        SELECT title, price, sell_price, description, photo, is_sold, supply_id, status
        FROM items WHERE id = ?
    """, (item_id,))
    row = cur.fetchone()
    conn.close()

    if not row:
        await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    title, price, sell_price, desc, photo_path, is_sold_db, supply_id, status = row

    # === –†–ê–°–ß–Å–¢ –°–†–û–ö–û–í ===
    arrival_text = "üöö –ü—Ä–∏–µ–¥–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑: <b>20‚Äì30 –¥–Ω–µ–π</b>"

    # –°—Ä–æ–∫ –ø—Ä–æ–¥–∞–∂–∏
    if sell_price < 5000:
        sale_time = "‚è± –ü—Ä–æ–¥–∞–∂–∞: <b>–ú–µ–Ω—å—à–µ –Ω–µ–¥–µ–ª–∏</b>"
    elif 5000 <= sell_price < 10000:
        sale_time = "‚è± –ü—Ä–æ–¥–∞–∂–∞: <b>5‚Äì10 –¥–Ω–µ–π</b>"
    elif 10000 <= sell_price < 15000:
        sale_time = "‚è± –ü—Ä–æ–¥–∞–∂–∞: <b>10‚Äì20 –¥–Ω–µ–π</b>"
    else:
        sale_time = "‚è± –ü—Ä–æ–¥–∞–∂–∞: <b>3 –Ω–µ–¥–µ–ª–∏ ‚Äì 2 –º–µ—Å—è—Ü–∞</b>"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–Ω–µ–≥ = –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏ + 1-2 –¥–Ω—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
    money_time = "üí∞ –î–µ–Ω—å–≥–∏: <b>–ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –ø–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏ (–ø–æ–∫–∞ –∞–≤–∏—Ç–æ –¥–æ—Å—Ç–∞–≤–∏—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—é)</b>"

    # –û–ø–∏—Å–∞–Ω–∏–µ
    text = (
        f"üì¶ <b>{title}</b>\n\n"
        f"üí∞ –ó–∞–∫—É–ø–∫–∞: <b>{price}‚ÇΩ</b>\n"
        f"üéØ –ü—Ä–æ–¥–∞–∂–∞: <b>{sell_price}‚ÇΩ</b>\n"
        f"üè∑ –°—Ç–∞—Ç—É—Å: <b>{status}</b>\n\n"
        f"{arrival_text}\n"
        f"{sale_time}\n"
        f"{money_time}\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{desc or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}"
    )

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"supply_user_{supply_id}")]
    ])

    if photo_path and os.path.exists(photo_path):
        try:
            await call.message.delete()
        except:
            pass
        await bot.send_photo(
            chat_id=call.message.chat.id,
            photo=FSInputFile(photo_path),
            caption=text,
            reply_markup=markup,
            parse_mode="HTML"
        )
    else:
        try:
            await call.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
        except:
            await call.message.answer(text, reply_markup=markup, parse_mode="HTML")

@dp.callback_query(F.data == "admin_create_supply")
async def admin_create_supply(call: CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return

    # –ò–º—è –ø–æ—Å—Ç–∞–≤–∫–∏: "–ü–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç 01.09.2024"
    name = f"–ü–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç {datetime.now().strftime('%d.%m.%Y')}"

    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("INSERT INTO supplies (name, status) VALUES (?, 'active')", (name,))
    conn.commit()
    conn.close()

    await call.answer(f"‚úÖ –ü–æ—Å—Ç–∞–≤–∫–∞ '{name}' —Å–æ–∑–¥–∞–Ω–∞!", show_alert=True)
    await admin_panel(call)

@dp.callback_query(F.data == "admin_delete_supply")
async def admin_delete_supply_start(call: CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return

    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("SELECT id, name FROM supplies WHERE status = 'active'")
    supplies = cur.fetchall()
    conn.close()

    if not supplies:
        await call.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤–æ–∫.", show_alert=True)
        return

    buttons = []
    for s in supplies:
        buttons.append([InlineKeyboardButton(text=s[1], callback_data=f"confirm_delete_supply_{s[0]}")])
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")])

    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))


@dp.callback_query(F.data.startswith("confirm_delete_supply_"))
async def confirm_delete_supply(call: CallbackQuery):
    supply_id = int(call.data.split("_")[3])

    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("SELECT name FROM supplies WHERE id = ?", (supply_id,))
    name = cur.fetchone()
    conn.close()

    if not name:
        await call.answer("–ü–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º: —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å?
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –í –ø—Ä–µ–¥—ã–¥—É—â–∏–µ", callback_data=f"move_supply_{supply_id}")],
        [InlineKeyboardButton(text="üíÄ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data=f"full_delete_supply_{supply_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
    ])
    await call.message.edit_text(f"–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –ø–æ—Å—Ç–∞–≤–∫–æ–π:\n\n<b>{name[0]}</b>?", reply_markup=markup, parse_mode="HTML")


@dp.callback_query(F.data.startswith("move_supply_"))
async def move_supply_to_completed(call: CallbackQuery):
    supply_id = int(call.data.split("_")[2])

    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("UPDATE supplies SET status = 'completed' WHERE id = ?", (supply_id,))
    conn.commit()
    conn.close()

    await call.answer("‚úÖ –ü–æ—Å—Ç–∞–≤–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ '–ü—Ä–µ–¥—ã–¥—É—â–∏–µ'.")
    await admin_panel(call)


@dp.callback_query(F.data.startswith("full_delete_supply_"))
async def full_delete_supply(call: CallbackQuery):
    supply_id = int(call.data.split("_")[3])

    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏ —Å–∞–º—É –ø–æ—Å—Ç–∞–≤–∫—É
    cur.execute("DELETE FROM items WHERE supply_id = ?", (supply_id,))
    cur.execute("DELETE FROM supplies WHERE id = ?", (supply_id,))
    conn.commit()
    conn.close()

    await call.answer("‚úÖ –ü–æ—Å—Ç–∞–≤–∫–∞ –∏ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã.")
    await admin_panel(call)

@dp.callback_query(F.data.startswith("admin_item_"))
async def admin_show_item_details(call: CallbackQuery, state: FSMContext):
    item_id = int(call.data.split("_")[2])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update_data(current_item_id=item_id)

    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("""
        SELECT title, price, sell_price, description, photo, is_sold, supply_id, status
        FROM items WHERE id = ?
    """, (item_id,))
    row = cur.fetchone()
    conn.close()

    if not row:
        await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    title, price, sell_price, desc, photo_path, is_sold_db, supply_id, status = row
    text = (
        f"üì¶ <b>{title}</b>\n\n"
        f"üí∞ –ó–∞–∫—É–ø–∫–∞: <b>{price}‚ÇΩ</b>\n"
        f"üéØ –ü—Ä–æ–¥–∞–∂–∞: <b>{sell_price}‚ÇΩ</b>\n"
        f"üè∑ –°—Ç–∞—Ç—É—Å: <b>{status}</b>\n"
        f"üì¶ –ü—Ä–æ–¥–∞–∂–∞: {'‚úÖ' if is_sold_db else 'üîÑ'}\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{desc or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}"
    )

    # === –ö–ù–û–ü–ö–ò –î–õ–Ø –ê–î–ú–ò–ù–ê ===
    keyboard = []

    # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–∞–Ω–æ"
    btn_text = "‚ùå –£–±—Ä–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É" if is_sold_db else "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–Ω–æ–µ"
    keyboard.append([InlineKeyboardButton(text=btn_text, callback_data=f"toggle_sold_{item_id}")])

    # –ö–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å" –∏ "–ò–∑–º–µ–Ω–∏—Ç—å"
    keyboard.append([
        InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data="admin_delete_item"),
        InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="admin_edit_item")
    ])

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_supply_{supply_id}")])

    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    if photo_path and os.path.exists(photo_path):
        try:
            await call.message.delete()
        except:
            pass
        await bot.send_photo(
            chat_id=call.message.chat.id,
            photo=FSInputFile(photo_path),
            caption=text,
            reply_markup=markup,
            parse_mode="HTML"
        )
    else:
        try:
            await call.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
        except:
            await call.message.answer(text, reply_markup=markup, parse_mode="HTML")
# === 1. –ú–æ–π –≤–∫–ª–∞–¥ ===
@dp.callback_query(F.data == "my_contributions")
async def my_contributions(call: CallbackQuery):
    user_id = call.from_user.id
    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("""
        SELECT s.name, c.amount, s.status
        FROM contributions c
        JOIN supplies s ON c.supply_id = s.id
        WHERE c.user_id = ?
    """, (user_id,))
    rows = cur.fetchall()
    conn.close()

    if not rows:
        await call.answer("–í—ã –µ—â—ë –Ω–µ –¥–µ–ª–∞–ª–∏ –≤–∫–ª–∞–¥–æ–≤.", show_alert=True)
        return

    text = "üìä –í–∞—à–∏ –≤–∫–ª–∞–¥—ã:\n\n"
    for name, amount, status in rows:
        profit = "‚Äî"
        percent = "‚Äî"
        if status == "completed":
            profit = round(amount * 1.3, 2)  # –ü—Ä–∏–º–µ—Ä –ø—Ä–∏–±—ã–ª–∏
            percent = "30%"
        text += f"üì¶ {name}\nüí∏ –í–∫–ª–∞–¥: {amount}‚ÇΩ\nüìà –ü—Ä–∏–±—ã–ª—å: {profit}‚ÇΩ\nüìä –î–æ–ª—è: {percent}\n\n"

    await call.message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]))

# === 2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É ===
@dp.callback_query(F.data == "view_supply")
async def view_supply(call: CallbackQuery):
    buttons = [
        [InlineKeyboardButton(text="üì¶ –ù—ã–Ω–µ—à–Ω—è—è –ø–æ—Å—Ç–∞–≤–∫–∞", callback_data="supply_list_current")],
        [InlineKeyboardButton(text="üì¶ –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏", callback_data="supply_list_completed")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∫—É:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@dp.callback_query(F.data.startswith("supply_list_"))
async def show_supply_list(call: CallbackQuery):
    supply_type = call.data.split("_")[2]  # current –∏–ª–∏ completed

    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    if supply_type == "current":
        cur.execute("SELECT id, name FROM supplies WHERE status = 'active'")
    else:
        cur.execute("SELECT id, name FROM supplies WHERE status = 'completed'")
    supplies = cur.fetchall()
    conn.close()

    buttons = []
    for s in supplies:
        # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: supply_user_1
        buttons.append([InlineKeyboardButton(text=s[1], callback_data=f"supply_user_{s[0]}")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="view_supply")])

    await call.message.answer(f"–°–ø–∏—Å–æ–∫ {supply_type} –ø–æ—Å—Ç–∞–≤–æ–∫:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@dp.callback_query(F.data == "admin_view_supply")
async def admin_view_supply(call: CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return

    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("SELECT id, name FROM supplies WHERE status = 'active'")
    supplies = cur.fetchall()
    conn.close()

    if not supplies:
        await call.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏.", show_alert=True)
        return

    buttons = []
    for s in supplies:
        buttons.append([InlineKeyboardButton(text=s[1], callback_data=f"admin_supply_{s[0]}")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")])

    try:
        await call.message.edit_text("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    except:
        await call.message.answer("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
@dp.callback_query(F.data.startswith("supply_user_"))
async def user_show_supply_items(call: CallbackQuery):
    supply_id = int(call.data.split("_")[2])

    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("SELECT name FROM supplies WHERE id = ?", (supply_id,))
    name_row = cur.fetchone()
    conn.close()

    if not name_row:
        await call.answer("–ü–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–±–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫)
    await call.message.answer(
        f"üì¶ –¢–æ–≤–∞—Ä—ã –≤ –ø–æ—Å—Ç–∞–≤–∫–µ: {name_row[0]}",
        reply_markup=get_item_list_keyboard(supply_id, for_admin=False)
    )

@dp.callback_query(F.data.startswith("admin_supply_"))
async def admin_show_supply_items(call: CallbackQuery):
    supply_id = int(call.data.split("_")[2])

    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("SELECT name FROM supplies WHERE id = ?", (supply_id,))
    name_row = cur.fetchone()
    conn.close()

    if not name_row:
        await call.answer("–ü–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("SELECT id, title, price, is_sold FROM items WHERE supply_id = ?", (supply_id,))
    items = cur.fetchall()  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: cur.fetchall()
    conn.close()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    buttons = []
    for item in items:
        item_id, title, price, is_sold = item
        status = "‚úÖ" if is_sold else "üîÑ"
        text = f"{title} ‚Äî {price}‚ÇΩ {status}"
        buttons.append([InlineKeyboardButton(text=text, callback_data=f"item_{item_id}_admin")])

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    buttons.append([InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã", callback_data=f"delete_all_{supply_id}")])
    buttons.append([InlineKeyboardButton(text="üîÅ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö", callback_data=f"bulk_status_{supply_id}")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_view_supply")])

    markup = InlineKeyboardMarkup(inline_keyboard=buttons)

    await call.message.answer(f"üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–æ–π: {name_row[0]}", reply_markup=markup)
@dp.callback_query(F.data.startswith("delete_all_"))
async def confirm_delete_all(call: CallbackQuery):
    supply_id = int(call.data.split("_")[2])

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å—ë", callback_data=f"confirm_delete_all_{supply_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_view_supply")]
    ])
    await call.message.edit_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å **–≤—Å–µ —Ç–æ–≤–∞—Ä—ã** –∏–∑ —ç—Ç–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏?", reply_markup=markup)

@dp.callback_query(F.data.startswith("confirm_delete_all_"))
async def delete_all_items(call: CallbackQuery):
    supply_id = int(call.data.split("_")[3])

    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("DELETE FROM items WHERE supply_id = ?", (supply_id,))
    conn.commit()
    conn.close()

    await call.message.edit_text("üóë –í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã.")
    await admin_view_supply(call)

@dp.callback_query(F.data.startswith("bulk_status_"))
async def bulk_status_prompt(call: CallbackQuery, state: FSMContext):
    supply_id = int(call.data.split("_")[2])
    await state.update_data(bulk_supply_id=supply_id)

    buttons = []
    for status in STATUSES:
        buttons.append([InlineKeyboardButton(text=status, callback_data=f"apply_bulk_status_{status}")])
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_view_supply")])
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è **–≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤** –≤ –ø–æ—Å—Ç–∞–≤–∫–µ:", reply_markup=markup)

@dp.callback_query(F.data.startswith("apply_bulk_status_"))
async def apply_bulk_status(call: CallbackQuery, state: FSMContext):
    status = call.data.replace("apply_bulk_status_", "").replace("_", " ")
    data = await state.get_data()
    supply_id = data["bulk_supply_id"]

    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("UPDATE items SET status = ? WHERE supply_id = ?", (status, supply_id))
    conn.commit()
    conn.close()

    await call.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {status}")
    await admin_view_supply(call)

@dp.callback_query(F.data == "admin_add_contribution")
async def admin_add_contribution_start(call: CallbackQuery, state: FSMContext):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return
    await state.set_state(AddContribution.waiting_username)
    await call.message.answer(
        "üë§ –í–≤–µ–¥–∏—Ç–µ <b>—é–∑–µ—Ä–Ω–µ–π–º</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, @ivan_123 –∏–ª–∏ ivan_123):",
        parse_mode="HTML"
    )
@dp.callback_query(F.data.startswith("supply_"))
async def show_supply_items(call: CallbackQuery):
    data = call.data.split("_")
    supply_id = int(data[1])
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∞–¥–º–∏–Ω –ª–∏ –≤—ã–∑–≤–∞–ª
    is_admin = call.from_user.id in ADMIN_IDS

    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("SELECT name FROM supplies WHERE id = ?", (supply_id,))
    name_row = cur.fetchone()
    conn.close()

    if not name_row:
        await call.answer("–ü–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    await call.message.answer(
        f"üì¶ –¢–æ–≤–∞—Ä—ã –≤ –ø–æ—Å—Ç–∞–≤–∫–µ: {name_row[0]}",
        reply_markup=get_item_list_keyboard(supply_id, for_admin=is_admin)
    )

@dp.callback_query(F.data.startswith("supply_"))
async def show_supply_items(call: CallbackQuery):
    data = call.data.split("_")
    supply_id = int(data[1])
    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("SELECT name FROM supplies WHERE id = ?", (supply_id,))
    name = cur.fetchone()
    conn.close()
    if not name:
        await call.answer("–ü–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    await call.message.answer(f"üì¶ –¢–æ–≤–∞—Ä—ã –≤ –ø–æ—Å—Ç–∞–≤–∫–µ: {name[0]}", reply_markup=get_item_list_keyboard(supply_id))

# === –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞ ===
@dp.callback_query(F.data.startswith("item_"))
async def show_item_details(call: CallbackQuery, state: FSMContext):
    data = call.data.split("_")
    item_id = int(data[1])
    is_admin = len(data) > 2 and data[2] == "admin"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º item_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π (—É–¥–∞–ª–µ–Ω–∏–µ/–∏–∑–º–µ–Ω–µ–Ω–∏–µ)
    if is_admin:
        await state.update_data(current_item_id=item_id)

    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("""
        SELECT title, price, sell_price, description, photo, is_sold, supply_id, status
        FROM items WHERE id = ?
    """, (item_id,))
    row = cur.fetchone()
    if not row:
        await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    title, price, sell_price, desc, photo_path, is_sold_db, supply_id, status = row
    text = (
        f"üì¶ <b>{title}</b>\n\n"
        f"üí∞ –ó–∞–∫—É–ø–∫–∞: <b>{price}‚ÇΩ</b>\n"
        f"üéØ –ü—Ä–æ–¥–∞–∂–∞: <b>{sell_price}‚ÇΩ</b>\n"
        f"üè∑ –°—Ç–∞—Ç—É—Å: <b>{status}</b>\n"
        f"üì¶ –ü—Ä–æ–¥–∞–∂–∞: {'‚úÖ' if is_sold_db else 'üîÑ'}\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{desc or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}"
    )

    # === –ö–ù–û–ü–ö–ò (–≤–Ω–∏–∑—É –∫–∞—Ä—Ç–æ—á–∫–∏) ===
    keyboard = []

    if is_admin:
        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–∞–Ω–æ"
        btn_text = "‚ùå –£–±—Ä–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É" if is_sold_db else "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–Ω–æ–µ"
        keyboard.append([InlineKeyboardButton(text=btn_text, callback_data=f"toggle_sold_{item_id}")])

        # –ö–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å" –∏ "–ò–∑–º–µ–Ω–∏—Ç—å"
        keyboard.append([
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data="admin_delete_item"),
            InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="admin_edit_item")
        ])

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_supply_{supply_id}")])

    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç
    if photo_path and os.path.exists(photo_path):
        try:
            await call.message.delete()  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–ø–∏—Å–æ–∫)
        except:
            pass
        await bot.send_photo(
            chat_id=call.message.chat.id,
            photo=FSInputFile(photo_path),
            caption=text,
            reply_markup=markup,
            parse_mode="HTML"
        )
    else:
        try:
            await call.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
        except:
            await call.message.answer(text, reply_markup=markup, parse_mode="HTML")
@dp.callback_query(F.data == "admin_delete_item")
async def admin_confirm_delete(call: CallbackQuery, state: FSMContext):
    # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –º—ã —É–∂–µ –∑–Ω–∞–µ–º item_id ‚Äî –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç–æ–≤–∞—Ä–∞
    data = await state.get_data()
    item_id = data.get("current_item_id")
    if not item_id:
        await call.answer("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä.", show_alert=True)
        return

    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("SELECT title FROM items WHERE id = ?", (item_id,))
    row = cur.fetchone()
    conn.close()

    if not row:
        await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")]
    ])
    await call.message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä:\n\n<b>{row[0]}</b>?",
                              reply_markup=markup, parse_mode="HTML")


@dp.callback_query(F.data == "confirm_delete")
async def admin_delete_item(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    item_id = data.get("current_item_id")
    if not item_id:
        await call.answer("–û—à–∏–±–∫–∞.")
        return

    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("DELETE FROM items WHERE id = ?", (item_id,))
    conn.commit()
    conn.close()

    await call.message.answer("üóë –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
    await state.clear()


@dp.callback_query(F.data == "cancel_delete")
async def cancel_delete(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@dp.callback_query(F.data == "admin_edit_item")
async def admin_edit_item_start(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    item_id = data.get("current_item_id")
    if not item_id:
        await call.answer("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä.", show_alert=True)
        return

    await state.update_data(edit_item_id=item_id)

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_title")],
        [InlineKeyboardButton(text="üí∞ –¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏", callback_data="edit_price")],
        [InlineKeyboardButton(text="üéØ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏", callback_data="edit_sell_price")],
        [InlineKeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_description")],
        [InlineKeyboardButton(text="üñº –§–æ—Ç–æ", callback_data="edit_photo")],
        [InlineKeyboardButton(text="üè∑ –°—Ç–∞—Ç—É—Å", callback_data="edit_status")],  # ‚Üê –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_cancel")]
    ])
    await call.message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=markup)

STATUSES = [
    "–ö—É–ø–ª–µ–Ω", "–ï–¥–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥", "–ù–∞ —Å–∫–ª–∞–¥–µ", "–ï–¥–µ—Ç –≤ –ú–°–ö",
    "–í –ú–°–ö", "–ï–¥–µ—Ç –≤ –°–ü–ë", "–ù–∞–ª–∏—á–∏–µ", "–ü—Ä–æ–¥–∞–Ω"
]

@dp.callback_query(F.data == "edit_status")
async def edit_status_prompt(call: CallbackQuery):
    buttons = []
    for status in STATUSES:
        buttons.append([InlineKeyboardButton(text=status, callback_data=f"set_status_{status}")])
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_cancel")])
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:", reply_markup=markup)

@dp.callback_query(F.data.startswith("set_status_"))
async def set_status(call: CallbackQuery, state: FSMContext):
    status = call.data.replace("set_status_", "").replace("_", " ")
    data = await state.get_data()
    item_id = data["edit_item_id"]

    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("UPDATE items SET status = ? WHERE id = ?", (status, item_id))
    conn.commit()
    conn.close()

    await call.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {status}")
    await show_item_details(CallbackQuery(
        id=call.id,
        from_user=call.from_user,
        chat_instance=call.chat_instance,
        data=f"item_{item_id}_admin",
        message=call.message
    ))

@dp.callback_query(F.data == "edit_title")
async def edit_title_prompt(call: CallbackQuery, state: FSMContext):
    await state.set_state(EditItem.waiting_new_title)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")

@dp.message(EditItem.waiting_new_title)
async def edit_title_save(message: Message, state: FSMContext):
    new_title = message.text.strip()
    data = await state.get_data()
    item_id = data["edit_item_id"]

    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("UPDATE items SET title = ? WHERE id = ?", (new_title, item_id))
    conn.commit()
    conn.close()

    await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: <b>{new_title}</b>", parse_mode="HTML")
    await state.clear()
    await cmd_start(message)

@dp.callback_query(F.data == "edit_price")
async def edit_price_prompt(call: CallbackQuery, state: FSMContext):
    await state.set_state(EditItem.waiting_new_price)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∑–∞–∫—É–ø–∫–∏:")



@dp.message(EditItem.waiting_new_price)
async def edit_price_save(message: Message, state: FSMContext):
    try:
        new_price = float(message.text)
    except:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return
    data = await state.get_data()
    item_id = data["edit_item_id"]

    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("UPDATE items SET price = ? WHERE id = ?", (new_price, item_id))
    conn.commit()
    conn.close()

    await message.answer(f"‚úÖ –¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: <b>{new_price}‚ÇΩ</b>", parse_mode="HTML")
    await state.clear()
    await cmd_start(message)

@dp.callback_query(F.data == "edit_sell_price")
async def edit_sell_price_prompt(call: CallbackQuery, state: FSMContext):
    await state.set_state(EditItem.waiting_new_sell_price)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –æ–∂–∏–¥–∞–µ–º—É—é —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏:")

@dp.message(EditItem.waiting_new_sell_price)
async def edit_sell_price_save(message: Message, state: FSMContext):
    try:
        new_price = float(message.text)
    except:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return
    data = await state.get_data()
    item_id = data["edit_item_id"]

    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("UPDATE items SET sell_price = ? WHERE id = ?", (new_price, item_id))
    conn.commit()
    conn.close()

    await message.answer(f"‚úÖ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: <b>{new_price}‚ÇΩ</b>", parse_mode="HTML")
    await state.clear()
    await cmd_start(message)

@dp.callback_query(F.data == "edit_description")
async def edit_description_prompt(call: CallbackQuery, state: FSMContext):
    await state.set_state(EditItem.waiting_new_description)
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")

@dp.message(EditItem.waiting_new_description)
async def edit_description_save(message: Message, state: FSMContext):
    new_desc = message.text.strip()
    data = await state.get_data()
    item_id = data["edit_item_id"]

    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("UPDATE items SET description = ? WHERE id = ?", (new_desc, item_id))
    conn.commit()
    conn.close()

    await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    await state.clear()
    await cmd_start(message)
@dp.callback_query(F.data == "edit_photo")
async def edit_photo_prompt(call: CallbackQuery, state: FSMContext):
    await state.set_state(EditItem.waiting_new_photo)
    await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:")

@dp.message(EditItem.waiting_new_photo, F.photo)
async def edit_photo_save(message: Message, state: FSMContext):
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    filename = f"photos/{file.file_id}.jpg"
    await bot.download_file(file.file_path, filename)

    data = await state.get_data()
    item_id = data["edit_item_id"]

    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("UPDATE items SET photo = ? WHERE id = ?", (filename, item_id))
    conn.commit()
    conn.close()

    await message.answer("‚úÖ –§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    await state.clear()
    await cmd_start(message)

@dp.callback_query(F.data == "edit_cancel")
async def edit_cancel(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# === –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ "–ø—Ä–æ–¥–∞–Ω–æ" ===
@dp.callback_query(F.data.startswith("toggle_sold_"))
async def toggle_sold(call: CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω!", show_alert=True)
        return

    item_id = int(call.data.split("_")[2])
    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("SELECT is_sold, supply_id FROM items WHERE id = ?", (item_id,))
    row = cur.fetchone()
    if not row:
        await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    is_sold = 1 if row[0] == 0 else 0
    cur.execute("UPDATE items SET is_sold = ? WHERE id = ?", (is_sold, item_id))
    conn.commit()
    conn.close()

    await call.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω!", show_alert=True)

    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞
    await show_item_details(CallbackQuery(
        id=call.id,
        from_user=call.from_user,
        chat_instance=call.chat_instance,
        data=f"item_{item_id}_admin",
        message=call.message
    ))

# === 3. –°–¥–µ–ª–∞—Ç—å –≤–∫–ª–∞–¥ ===
@dp.callback_query(F.data == "make_contribution")
async def make_contribution(call: CallbackQuery):
    text = (
        "üí≥ –î–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –≤–∫–ª–∞–¥–∞ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –Ω–∞:\n\n"
        "–ü–†–ò–ù–ò–ú–ê–Æ –û–ü–õ–ê–¢–£ –¢–û–õ–¨–ö–û –ù–ê –¢-–ë–ê–ù–ö!!!\n"
        "–ö–∞—Ä—Ç–∞: 2200 7010 4325 8000\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: +79219753645\n"
        "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –í–∫–ª–∞–¥ –≤ –ø–æ—Å—Ç–∞–≤–∫—É\n\n"
        "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
    )
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –Ø —Å–¥–µ–ª–∞–ª –≤–∫–ª–∞–¥", callback_data="user_start_contribution")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    await call.message.edit_text(text, reply_markup=markup)

# === 4. –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å ===
@dp.callback_query(F.data == "admin_panel")
async def admin_panel(call: CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return
    await call.message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_panel())

@dp.callback_query(F.data == "user_start_contribution")
async def start_contribution_flow(call: CallbackQuery, state: FSMContext):
    banks = ["–°–±–µ—Ä–±–∞–Ω–∫", "–¢-–ë–∞–Ω–∫", "–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫", "–û–∑–æ–Ω –±–∞–Ω–∫", "–í–¢–ë", "–°–æ–≤–∫–æ–º–±–∞–Ω–∫", "–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫"]
    buttons = [[InlineKeyboardButton(text=bank, callback_data=f"bank_{bank}")] for bank in banks]
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")])
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await call.message.edit_text("üè¶ –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:", reply_markup=markup)
    await state.set_state(MakeContribution.waiting_bank)

@dp.callback_query(F.data.startswith("bank_"))
async def contribution_choose_bank(call: CallbackQuery, state: FSMContext):
    bank = call.data.replace("bank_", "").replace("_", " ")
    await state.update_data(bank=bank)
    await state.set_state(MakeContribution.waiting_payment_info)
    await call.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{bank}</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:",
        parse_mode="HTML"
    )
@dp.message(MakeContribution.waiting_payment_info)
async def contribution_enter_info(message: Message, state: FSMContext):
    payment_info = message.text.strip()
    if not payment_info:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ!")
        return

    await state.update_data(payment_info=payment_info)
    data = await state.get_data()

    text = (
        "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n\n"
        f"üè¶ –ë–∞–Ω–∫: <b>{data['bank']}</b>\n"
        f"üì±/üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã: <code>{payment_info}</code>\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ?"
    )
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_contribution")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="user_start_contribution")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]
    ])
    await message.answer(text, reply_markup=markup, parse_mode="HTML")
    await state.set_state(MakeContribution.waiting_confirm)

@dp.callback_query(F.data == "confirm_contribution")
async def confirm_and_send_to_admin(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user = call.from_user

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("""
        INSERT INTO contribution_requests (user_id, username, bank, payment_info, status)
        VALUES (?, ?, ?, ?, 'pending')
    """, (user.id, user.username, data['bank'], data['payment_info']))
    conn.commit()
    request_id = cur.lastrowid
    conn.close()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    for admin_id in ADMIN_IDS:
        try:
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∫–ª–∞–¥", callback_data=f"approve_req_{request_id}")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_req_{request_id}")]
            ])
            await bot.send_message(
                admin_id,
                f"üì¨ <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–∫–ª–∞–¥</b>\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} (@{user.username or '–Ω–µ—Ç'})\n"
                f"üè¶ –ë–∞–Ω–∫: {data['bank']}\n"
                f"üì±/üí≥: <code>{data['payment_info']}</code>",
                reply_markup=markup,
                parse_mode="HTML"
            )
        except:
            pass

    await call.message.edit_text(
        "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
        "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∫–ª–∞–¥–∞.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
    )
    await state.clear()

# === –ê–¥–º–∏–Ω: –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∫–ª–∞–¥—ã ===
@dp.callback_query(F.data == "admin_view_contributions")
async def admin_view_contributions(call: CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        return

    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("""
        SELECT tg.username, c.user_id, s.name, c.amount
        FROM contributions c
        JOIN supplies s ON c.supply_id = s.id
        LEFT JOIN (SELECT user_id, username FROM contributions GROUP BY user_id) tg
        ON c.user_id = tg.user_id
    """)
    rows = cur.fetchall()
    conn.close()

    if not rows:
        await call.answer("–ù–µ—Ç –≤–∫–ª–∞–¥–æ–≤.", show_alert=True)
        return

    text = "üìä –í—Å–µ –≤–∫–ª–∞–¥—ã:\n\n"
    for username, user_id, supply_name, amount in rows:
        username = username or f"ID:{user_id}"
        text += f"üë§ {username} ‚Üí {supply_name}: {amount}‚ÇΩ\n"

    await call.message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]))

# === –ê–¥–º–∏–Ω: –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä ===
@dp.callback_query(F.data == "admin_add_item")
async def admin_add_item_start(call: CallbackQuery, state: FSMContext):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return

    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("SELECT id, name FROM supplies WHERE status = 'active'")
    supplies = cur.fetchall()
    conn.close()

    if not supplies:
        await call.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤–æ–∫. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–æ—Å—Ç–∞–≤–∫—É.", show_alert=True)
        return

    if len(supplies) == 1:
        # –ï—Å–ª–∏ –æ–¥–Ω–∞ ‚Äî —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É
        await state.update_data(supply_id=supplies[0][0])
        await state.set_state(AddItem.waiting_title)
        await call.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    else:
        # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äî –¥–∞—ë–º –≤—ã–±–æ—Ä
        buttons = []
        for s in supplies:
            buttons.append([InlineKeyboardButton(text=s[1], callback_data=f"select_supply_{s[0]}")])
        buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")])
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∫—É –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=markup)

@dp.callback_query(F.data.startswith("select_supply_"))
async def select_supply_for_item(call: CallbackQuery, state: FSMContext):
    supply_id = int(call.data.split("_")[2])
    await state.update_data(supply_id=supply_id)
    await state.set_state(AddItem.waiting_title)
    await call.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

@dp.message(AddItem.waiting_title)
async def add_item_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞–∫—É–ø–∫–∏ (–≤ —Ä—É–±–ª—è—Ö):")
    await state.set_state(AddItem.waiting_price)

@dp.message(AddItem.waiting_price)
async def add_item_price(message: Message, state: FSMContext):
    try:
        price = float(message.text)
    except:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return
    await state.update_data(price=price)
    await message.answer("üéØ –í–≤–µ–¥–∏—Ç–µ –æ–∂–∏–¥–∞–µ–º—É—é —Ü–µ–Ω—É –ø—Ä–æ–¥–∞–∂–∏:")
    await state.set_state(AddItem.waiting_sell_price)

@dp.message(AddItem.waiting_sell_price)
async def add_item_sell_price(message: Message, state: FSMContext):
    try:
        sell_price = float(message.text)
    except:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return
    await state.update_data(sell_price=sell_price)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddItem.waiting_description)

@dp.message(AddContribution.waiting_username)
async def enter_username(message: Message, state: FSMContext):
    username = message.text.strip()

    # –£–±–∏—Ä–∞–µ–º @, –µ—Å–ª–∏ –µ—Å—Ç—å
    if username.startswith('@'):
        username = username[1:]

    if not username:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(username=username)
    await state.set_state(AddContribution.waiting_amount)
    await message.answer(f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–∫–ª–∞–¥–∞ (–≤ —Ä—É–±–ª—è—Ö) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>@{username}</b>:", parse_mode="HTML")

@dp.message(AddContribution.waiting_amount)
async def enter_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
    except:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")
        return

    data = await state.get_data()
    username = data["username"]

    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()

    # –ò—â–µ–º user_id –ø–æ username
    cur.execute("SELECT user_id FROM contributions WHERE username = ? LIMIT 1", (username,))
    row = cur.fetchone()

    if not row:
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ ‚Äî –µ—Å–ª–∏ username –µ—Å—Ç—å —É –∫–æ–≥–æ-—Ç–æ, –Ω–æ user_id –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω
        cur.execute("""
            SELECT user_id FROM contributions 
            WHERE username = ? 
            LIMIT 1
        """, (username,))
        row = cur.fetchone()

    if not row:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>@{username}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                             f"–û–Ω –¥–æ–ª–∂–µ–Ω —Ö–æ—Ç—è –±—ã —Ä–∞–∑ –Ω–∞–∂–∞—Ç—å /start.", parse_mode="HTML")
        await state.clear()
        return

    user_id = row[0]

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ—Å—Ç–∞–≤–∫—É
    cur.execute("SELECT id FROM supplies WHERE status = 'active' LIMIT 1")
    supply_row = cur.fetchone()
    if not supply_row:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏. –°–æ–∑–¥–∞–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –ø–æ—Å—Ç–∞–≤–∫—É.")
        await state.clear()
        return

    supply_id = supply_row[0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤–∫–ª–∞–¥
    cur.execute("SELECT amount FROM contributions WHERE user_id = ? AND supply_id = ?", (user_id, supply_id))
    existing = cur.fetchone()

    if existing:
        new_amount = existing[0] + amount
        cur.execute("UPDATE contributions SET amount = ? WHERE user_id = ? AND supply_id = ?",
                    (new_amount, user_id, supply_id))
        msg_text = f"‚úÖ –í–∫–ª–∞–¥ –æ–±–Ω–æ–≤–ª—ë–Ω! –¢–µ–ø–µ—Ä—å —É @{username} –≤–∫–ª–∞–¥: {new_amount}‚ÇΩ –≤ –ø–æ—Å—Ç–∞–≤–∫–µ #{supply_id}."
    else:
        cur.execute("INSERT INTO contributions (user_id, supply_id, amount, username) VALUES (?, ?, ?, ?)",
                    (user_id, supply_id, amount, username))
        msg_text = f"‚úÖ –í–∫–ª–∞–¥ –Ω–∞ {amount}‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –≤ –ø–æ—Å—Ç–∞–≤–∫—É #{supply_id}."

    conn.commit()
    conn.close()

    await message.answer(msg_text)
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu(message.from_user.id))

@dp.message(AddItem.waiting_description)
async def add_item_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddItem.waiting_photo)

@dp.message(AddItem.waiting_photo, F.photo)
async def add_item_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    filename = f"photos/{file.file_id}.jpg"
    await bot.download_file(file.file_path, filename)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ—Å—Ç–∞–≤–∫—É
    conn = sqlite3.connect(DB_NAME)
    cur = conn.cursor()
    cur.execute("SELECT id FROM supplies WHERE status = 'active' LIMIT 1")
    supply_id_row = cur.fetchone()
    supply_id = supply_id_row[0] if supply_id_row else 1

    # –ü–æ–ª—É—á–∞–µ–º supply_id –∏–∑ FSM
    supply_id = data.get("supply_id")
    if not supply_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∞.")
        await state.clear()
        return

    cur.execute("INSERT INTO items (supply_id, title, price, sell_price, description, photo) VALUES (?, ?, ?, ?, ?, ?)",
                (supply_id, data['title'], data['price'], data['sell_price'], data['description'], filename))
    conn.commit()
    conn.close()

    await message.answer("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu(message.from_user.id))

# === –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
@dp.callback_query(F.data == "back_to_main")
async def back_to_main(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu(call.from_user.id))

# === –ó–ê–ü–£–°–ö ===
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —á–∞—Ç–µ.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())